// <auto-generated />
using System;
using Mersy.Infraestructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Mersy.Infraestructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200913152743_FromLotteryToRestrictions")]
    partial class FromLotteryToRestrictions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mersy.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasMaxLength(150);

                    b.Property<int>("Comission");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsExternal");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Rnc")
                        .HasMaxLength(13);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OwnerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Denomym");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long>("PersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<int>("ImageIsFrom");

                    b.Property<string>("ImagenUrl");

                    b.Property<string>("Name");

                    b.Property<long?>("PersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.MaritalSituation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MaritalSituations");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Ocupation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Ocupations");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Owner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Footer1")
                        .HasMaxLength(100);

                    b.Property<string>("Footer2")
                        .HasMaxLength(100);

                    b.Property<string>("Footer3")
                        .HasMaxLength(100);

                    b.Property<string>("Header1")
                        .HasMaxLength(100);

                    b.Property<string>("Header2")
                        .HasMaxLength(100);

                    b.Property<string>("Header3")
                        .HasMaxLength(100);

                    b.Property<string>("Imagen");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("MegabytesAvailable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NcfEnds")
                        .HasMaxLength(25);

                    b.Property<long?>("OwnerTypeId");

                    b.Property<DateTime?>("PlanActiveUntil");

                    b.Property<string>("PrefixExp")
                        .HasMaxLength(10);

                    b.Property<string>("PrefixFact")
                        .HasMaxLength(15);

                    b.Property<string>("PrefixFinalFact")
                        .HasMaxLength(18);

                    b.Property<string>("PrefixNcf")
                        .HasMaxLength(16);

                    b.Property<string>("PrefixNcfGub");

                    b.Property<string>("PrefixOrder")
                        .HasMaxLength(10);

                    b.Property<int>("RegitersAvailable");

                    b.Property<string>("Rnc");

                    b.Property<int?>("SeqFact");

                    b.Property<int?>("SeqNcf");

                    b.Property<int>("SeqNcfGub");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Tel")
                        .HasMaxLength(15);

                    b.Property<bool>("UserNameInReport");

                    b.Property<int>("UsersAvailable");

                    b.Property<string>("WebAddress");

                    b.HasKey("Id");

                    b.HasIndex("OwnerTypeId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.OwnerPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long>("OwnerId");

                    b.Property<long>("PlanId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlanId");

                    b.ToTable("OwnerPlans");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.PaymentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Age")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("BornDate");

                    b.Property<string>("Cel")
                        .HasMaxLength(15);

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<DateTime?>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long?>("GenderId");

                    b.Property<string>("Imagen");

                    b.Property<long?>("MaritalSituationId");

                    b.Property<string>("Name");

                    b.Property<string>("Nss")
                        .HasMaxLength(15);

                    b.Property<long?>("OcupationId");

                    b.Property<string>("PlaceOfWork")
                        .HasMaxLength(150);

                    b.Property<int>("Record");

                    b.Property<string>("Record2");

                    b.Property<string>("Record3");

                    b.Property<long?>("ReligionId");

                    b.Property<long?>("SchoolLevelId");

                    b.Property<long>("StatusId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalSituationId");

                    b.HasIndex("OcupationId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SchoolLevelId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Religion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.SchoolLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SchoolLevels");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Shop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("CurrencyId");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Footer1");

                    b.Property<string>("Footer2");

                    b.Property<string>("Footer3");

                    b.Property<string>("Header1");

                    b.Property<string>("Header2");

                    b.Property<string>("Header3");

                    b.Property<string>("Imagen");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsIndependent");

                    b.Property<string>("Name");

                    b.Property<string>("NcfEnds");

                    b.Property<string>("PrefixExp");

                    b.Property<string>("PrefixFact");

                    b.Property<string>("PrefixFinalFact");

                    b.Property<string>("PrefixNcf");

                    b.Property<string>("PrefixOrder");

                    b.Property<int?>("SeqFact");

                    b.Property<int?>("SeqNcf");

                    b.Property<bool>("ShowSellerOnTicket");

                    b.Property<string>("Tel")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("WebAddress");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Table");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.UserShop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long>("ShopId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ShopId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("UserShops");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Cashier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("App");

                    b.Property<string>("AsignedUser2Id");

                    b.Property<string>("AsignedUserId");

                    b.Property<string>("Brand");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("MacAddress");

                    b.Property<string>("Model");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<long?>("ShopId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("AsignedUser2Id");

                    b.HasIndex("AsignedUserId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ShopId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Cashiers");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.CashierDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BilledBalance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("CashierId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CurrentBalanceCh")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CurrentBalanceEf")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CurrentBalanceNc")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CurrentBalanceTc")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CurrentBalanceTe")
                        .HasColumnType("decimal(12,2)");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<decimal>("EndBalance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("EndBalanceCheck")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("EndBalanceCredit")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("EndBalanceEf")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("EndBalanceNc")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("EndBalanceTe")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("EndingDate");

                    b.Property<bool>("IsOpened");

                    b.Property<decimal?>("Mf1")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf10")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf100")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf1000")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf20")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf200")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf2000")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf25")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf5")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf50")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf500")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Name");

                    b.Property<decimal>("StartBalance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("StartingDate")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CashierDetails");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("DebAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long>("PersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<decimal>("WastedAmount")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Lottery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CloseHour");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("ColorInHex");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long?>("LotteryFromId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryFromId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Lotteries");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryAvailable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryAvailables");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryDayLimit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long?>("LotteryId");

                    b.Property<long?>("LotteryModeId");

                    b.Property<string>("Name");

                    b.Property<int?>("Number");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("LotteryDayLimits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryFrom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LotteryFrom");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryGlobalLimit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryGlobalLimits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryIndividualLimit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryIndividualLimits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryMode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AwardedNumber");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("PlayableNumber");

                    b.HasKey("Id");

                    b.ToTable("LotteryModes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryNumberLimit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<string>("Name");

                    b.Property<int>("Number");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryNumberLimits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CashierDetailId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("LotterySaleId");

                    b.Property<string>("Name");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CashierDetailId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotterySaleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryPayments");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryPlayedNumber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("LotterySaleItemId");

                    b.Property<string>("Name");

                    b.Property<int>("PlayedNumber");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotterySaleItemId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryPlayedNumbers");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryPrize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<decimal>("FirstValue")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<string>("Name");

                    b.Property<decimal>("SecondValue")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("ThirdValue")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryPrizes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<int>("FirstValue");

                    b.Property<long>("LotteryId");

                    b.Property<string>("Name");

                    b.Property<int>("SecondValue");

                    b.Property<int>("ThirdValue");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryResults");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode");

                    b.Property<long>("CashierDetailId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<decimal>("Prize")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Remarks");

                    b.Property<int>("SeqByOwner");

                    b.Property<int>("SeqByShop");

                    b.Property<string>("Ticket");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<bool>("WasPaid");

                    b.HasKey("Id");

                    b.HasIndex("CashierDetailId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotterySales");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySaleItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<long>("LotterySaleId");

                    b.Property<string>("Name");

                    b.Property<decimal>("PlayedAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("LotterySaleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotterySaleItems");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CloseHour");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<int>("DayOfTheWeek");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime>("InactiveDate");

                    b.Property<long>("LotteryId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotterySchedules");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryUserLimit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("LotteryUserLimits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("AmountCheck")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("AmountNc")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("AmountTc")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("AmountTe")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Bank")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("BuildDate");

                    b.Property<long>("CashierDetailId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<decimal?>("DevolvedAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long?>("LotterySaleId");

                    b.Property<string>("Name");

                    b.Property<string>("NoCheque")
                        .HasMaxLength(20);

                    b.Property<string>("Owner")
                        .HasMaxLength(100);

                    b.Property<long>("PaymentTypeId");

                    b.Property<decimal?>("ReceivedAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("WhoPay")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CashierDetailId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotterySaleId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.CurrencyRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CurrencyId");

                    b.Property<decimal>("DolarEquivalent")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Option", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(25);

                    b.Property<string>("Area")
                        .HasMaxLength(25);

                    b.Property<string>("Class")
                        .HasMaxLength(100);

                    b.Property<string>("Controller")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Icon");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Link")
                        .HasMaxLength(100);

                    b.Property<string>("Name");

                    b.Property<long>("OptionModuleId");

                    b.Property<int>("Order");

                    b.Property<long?>("PlanId");

                    b.HasKey("Id");

                    b.HasIndex("OptionModuleId");

                    b.HasIndex("PlanId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.OptionModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(25);

                    b.Property<string>("Area")
                        .HasMaxLength(25);

                    b.Property<string>("Class")
                        .HasMaxLength(100);

                    b.Property<string>("Controller")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Icon");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Link")
                        .HasMaxLength(100);

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.ToTable("OptionModules");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.OwnerType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("OwnerTypes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Periodicity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Periodicities");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Plan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("CurrencyId");

                    b.Property<int>("Megabytes");

                    b.Property<string>("Name");

                    b.Property<long>("PeriodicityId");

                    b.Property<int>("RegiterCount");

                    b.Property<int>("UserPosibility");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PeriodicityId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.PlanOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long>("OptionId");

                    b.Property<long?>("OptionModuleId");

                    b.Property<long>("PlanId");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("OptionModuleId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanOption");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.PlanTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("CurrencyId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Megabytes");

                    b.Property<string>("Name");

                    b.Property<long>("OwnerPlanId");

                    b.Property<long>("PaymentTypeId");

                    b.Property<int>("Registers");

                    b.Property<int>("UserPosibility");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OwnerPlanId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PlanTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Employee", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Employees")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Image", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Images")
                        .HasForeignKey("PersonId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Owner", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.OwnerType", "OwnerType")
                        .WithMany("Owners")
                        .HasForeignKey("OwnerTypeId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.OwnerPlan", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Owner", "Owner")
                        .WithMany("OwnerPlans")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Root.Plan", "Plan")
                        .WithMany("OwnerPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Person", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Mersy.Domain.Entities.Cor.MaritalSituation", "MaritalSituation")
                        .WithMany()
                        .HasForeignKey("MaritalSituationId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Ocupation", "Ocupation")
                        .WithMany()
                        .HasForeignKey("OcupationId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.HasOne("Mersy.Domain.Entities.Cor.SchoolLevel", "SchoolLevel")
                        .WithMany()
                        .HasForeignKey("SchoolLevelId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Status", "Status")
                        .WithMany("People")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Shop", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.Root.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.UserShop", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "AppUser")
                        .WithMany("UserShops")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Shop", "Shop")
                        .WithMany("UserShops")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Cashier", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "AsignedUser2")
                        .WithMany()
                        .HasForeignKey("AsignedUser2Id");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "AsignedUser")
                        .WithMany()
                        .HasForeignKey("AsignedUserId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.CashierDetail", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Pos.Cashier", "Cashier")
                        .WithMany("CashiersdDetails")
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Customer", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Customers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Lottery", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryFrom", "LotteryFrom")
                        .WithMany("Lotteries")
                        .HasForeignKey("LotteryFromId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryAvailable", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany("LotteryAvailables")
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany("LotteryAvailables")
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryDayLimit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId");

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany()
                        .HasForeignKey("LotteryModeId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryGlobalLimit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany()
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryIndividualLimit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany()
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryNumberLimit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany()
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryPayment", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Pos.CashierDetail", "CashierDetail")
                        .WithMany()
                        .HasForeignKey("CashierDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.LotterySale", "LotterySale")
                        .WithMany()
                        .HasForeignKey("LotterySaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryPlayedNumber", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.LotterySaleItem", "LotterySaleItem")
                        .WithMany("LotteryPlayedNumbers")
                        .HasForeignKey("LotterySaleItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryPrize", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany("LotteryPrizes")
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany("LotteryPrizes")
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryResult", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySale", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Pos.CashierDetail", "CashierDetail")
                        .WithMany("LotterySales")
                        .HasForeignKey("CashierDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySaleItem", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany("LotterySaleItems")
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotterySale", "LotterySale")
                        .WithMany("LotterySaleItems")
                        .HasForeignKey("LotterySaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySchedule", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany("LotterySchedules")
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryUserLimit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany()
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Payment", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Pos.CashierDetail", "CashierDetail")
                        .WithMany()
                        .HasForeignKey("CashierDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.LotterySale", "LotterySale")
                        .WithMany()
                        .HasForeignKey("LotterySaleId");

                    b.HasOne("Mersy.Domain.Entities.Cor.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.CurrencyRate", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.Currency", "Currency")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Option", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.OptionModule", "OptionModule")
                        .WithMany()
                        .HasForeignKey("OptionModuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Root.Plan")
                        .WithMany("Options")
                        .HasForeignKey("PlanId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Plan", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.Currency", "Currency")
                        .WithMany("Plans")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Root.Periodicity", "Periodicity")
                        .WithMany("Plans")
                        .HasForeignKey("PeriodicityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.PlanOption", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.Option", "Option")
                        .WithMany("PlanOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Root.OptionModule")
                        .WithMany("PlanOptions")
                        .HasForeignKey("OptionModuleId");

                    b.HasOne("Mersy.Domain.Entities.Root.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.PlanTransaction", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.OwnerPlan", "OwnerPlan")
                        .WithMany("PlanTransactions")
                        .HasForeignKey("OwnerPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
