// <auto-generated />
using System;
using Mersy.Infraestructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Mersy.Infraestructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200818173217_Initialization")]
    partial class Initialization
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mersy.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasMaxLength(150);

                    b.Property<int>("Comission");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsExternal");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Rnc")
                        .HasMaxLength(13);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OwnerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<long?>("GroupId");

                    b.Property<string>("Name");

                    b.Property<long?>("PlaceId");

                    b.Property<long>("ScheduleId");

                    b.Property<long?>("StatusId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.ActivityParticipant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityId");

                    b.Property<string>("ManualParticipant");

                    b.Property<string>("Name");

                    b.Property<long?>("ParticipantId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ActivityParticipants");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Analitical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<int>("ImageIsFrom");

                    b.Property<string>("ImagenUrl");

                    b.Property<string>("Name");

                    b.Property<long?>("PersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Analiticals");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Denomym");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long>("PersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Estudie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<int>("ImageIsFrom");

                    b.Property<string>("ImagenUrl");

                    b.Property<string>("Name");

                    b.Property<long?>("PersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Estudies");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActivityId");

                    b.Property<long?>("BenefitId");

                    b.Property<long?>("ClasseId");

                    b.Property<long?>("ColaboratorDonationId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<long?>("FoodId");

                    b.Property<int>("ImageIsFrom");

                    b.Property<string>("ImagenUrl");

                    b.Property<string>("Name");

                    b.Property<long?>("PersonId");

                    b.Property<long?>("ProjectId");

                    b.Property<long?>("SignatureId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("BenefitId");

                    b.HasIndex("ClasseId");

                    b.HasIndex("ColaboratorDonationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("FoodId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SignatureId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.MaritalSituation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MaritalSituations");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.MessageChat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.Property<DateTime>("When");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("MessageChats");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Occupant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClasseId");

                    b.Property<DateTime?>("DateFrom");

                    b.Property<DateTime?>("DateTo");

                    b.Property<string>("Name");

                    b.Property<string>("Observations")
                        .HasMaxLength(500);

                    b.Property<long?>("PersonId");

                    b.Property<long>("PlaceId");

                    b.Property<bool>("Undefined");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Occupants");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Ocupation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Ocupations");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Owner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Footer1")
                        .HasMaxLength(100);

                    b.Property<string>("Footer2")
                        .HasMaxLength(100);

                    b.Property<string>("Footer3")
                        .HasMaxLength(100);

                    b.Property<string>("Header1")
                        .HasMaxLength(100);

                    b.Property<string>("Header2")
                        .HasMaxLength(100);

                    b.Property<string>("Header3")
                        .HasMaxLength(100);

                    b.Property<string>("Imagen");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("MegabytesAvailable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NcfEnds")
                        .HasMaxLength(25);

                    b.Property<long?>("OwnerTypeId");

                    b.Property<DateTime?>("PlanActiveUntil");

                    b.Property<string>("PrefixExp")
                        .HasMaxLength(10);

                    b.Property<string>("PrefixFact")
                        .HasMaxLength(15);

                    b.Property<string>("PrefixFinalFact")
                        .HasMaxLength(18);

                    b.Property<string>("PrefixNcf")
                        .HasMaxLength(16);

                    b.Property<string>("PrefixNcfGub");

                    b.Property<string>("PrefixOrder")
                        .HasMaxLength(10);

                    b.Property<int>("RegitersAvailable");

                    b.Property<string>("Rnc");

                    b.Property<int?>("SeqFact");

                    b.Property<int?>("SeqNcf");

                    b.Property<int>("SeqNcfGub");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Tel")
                        .HasMaxLength(15);

                    b.Property<bool>("UserNameInReport");

                    b.Property<int>("UsersAvailable");

                    b.Property<string>("WebAddress");

                    b.HasKey("Id");

                    b.HasIndex("OwnerTypeId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.OwnerPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long>("OwnerId");

                    b.Property<long>("PlanId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlanId");

                    b.ToTable("OwnerPlans");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.PaymentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Age")
                        .HasMaxLength(30);

                    b.Property<long?>("BloodTypeId");

                    b.Property<DateTime?>("BornDate");

                    b.Property<string>("Cel")
                        .HasMaxLength(15);

                    b.Property<long?>("CountryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<DateTime?>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long?>("GenderId");

                    b.Property<string>("Imagen");

                    b.Property<long?>("InsuranceId");

                    b.Property<string>("InsuranceNumber")
                        .HasMaxLength(15);

                    b.Property<long?>("MaritalSituationId");

                    b.Property<long?>("MemberTypeId");

                    b.Property<string>("Name");

                    b.Property<string>("Nss")
                        .HasMaxLength(15);

                    b.Property<long?>("OcupationId");

                    b.Property<string>("PlaceOfWork")
                        .HasMaxLength(150);

                    b.Property<int>("Record");

                    b.Property<string>("Record2");

                    b.Property<string>("Record3");

                    b.Property<long?>("ReligionId");

                    b.Property<long?>("SchoolLevelId");

                    b.Property<long?>("SpecialityId");

                    b.Property<long>("StatusId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GenderId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("MaritalSituationId");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("OcupationId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SchoolLevelId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.PersonSpeciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long>("PersonId");

                    b.Property<long>("SpecialityId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("PersonSpecialities");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Place", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Ext")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDepartment");

                    b.Property<bool>("IsFreePlace");

                    b.Property<string>("Name");

                    b.Property<string>("Observations")
                        .HasMaxLength(500);

                    b.Property<long?>("PersonId");

                    b.Property<long>("StatusId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<long>("ZoneId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("ZoneId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Related", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long>("RelatedPersonId");

                    b.Property<long>("RelationTypeId");

                    b.Property<long>("RelationedPersonId");

                    b.HasKey("Id");

                    b.HasIndex("RelatedPersonId");

                    b.HasIndex("RelationTypeId");

                    b.HasIndex("RelationedPersonId");

                    b.ToTable("RelatedPeople");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.RelationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RelationTypes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Religion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.ScheduleFormat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ScheduleFormats");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.SchoolLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SchoolLevels");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Shop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("CurrencyId");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Footer1");

                    b.Property<string>("Footer2");

                    b.Property<string>("Footer3");

                    b.Property<string>("Header1");

                    b.Property<string>("Header2");

                    b.Property<string>("Header3");

                    b.Property<string>("Imagen");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsIndependent");

                    b.Property<string>("Name");

                    b.Property<string>("NcfEnds");

                    b.Property<string>("PrefixExp");

                    b.Property<string>("PrefixFact");

                    b.Property<string>("PrefixFinalFact");

                    b.Property<string>("PrefixNcf");

                    b.Property<string>("PrefixOrder");

                    b.Property<int?>("SeqFact");

                    b.Property<int?>("SeqNcf");

                    b.Property<string>("Tel")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("WebAddress");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Speciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Table");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Tanda", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tandas");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Zone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Observations")
                        .HasMaxLength(500);

                    b.Property<long?>("ShopId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ShopId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cpo.Origin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Simbol");

                    b.HasKey("Id");

                    b.ToTable("Origins");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.ActivityBeneficiary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("BenefitId");

                    b.Property<string>("BenefitString");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<int>("QuantityPart");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("BenefitId");

                    b.ToTable("ActivityBeneficiaries");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Beneficiary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long?>("BenefitId");

                    b.Property<string>("BenefitString");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<long?>("ReceiverId");

                    b.HasKey("Id");

                    b.HasIndex("BenefitId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Benefit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Buy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Ncf");

                    b.Property<string>("No");

                    b.Property<string>("Notes");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalItbis")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Buys");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.BuyDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BuyId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("ItbisAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Name");

                    b.Property<string>("ProductName");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalDetail")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("BuyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BuyDetails");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.ClassAsistant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AsistanceId");

                    b.Property<long>("ClasseId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AsistanceId");

                    b.HasIndex("ClasseId");

                    b.ToTable("Asistants");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Classe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<long>("PlaceId");

                    b.Property<long>("SignatureId");

                    b.Property<string>("Teacher");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PlaceId");

                    b.HasIndex("SignatureId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Colaborator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("ContactName");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Details");

                    b.Property<decimal>("DonatedAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Representant");

                    b.Property<string>("Tel1");

                    b.Property<string>("Tel2");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Colaborators");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.ColaboratorDonation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("ColaboratorId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Details");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ColaboratorId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ColaboratorDonations");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.DayOfTheWeek", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClasseId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ClasseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DaysOfTheWeeks");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.EconomicPerfil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ABANICOS");

                    b.Property<string>("ACTIVIDADESOTRO");

                    b.Property<string>("AGRICOLAOTRO");

                    b.Property<bool>("AGRICOLAS");

                    b.Property<int>("AGUA");

                    b.Property<bool>("ALQUILERS");

                    b.Property<int>("ALUMBRADO");

                    b.Property<int>("ANALFABETISMO");

                    b.Property<bool>("ARROZE");

                    b.Property<int>("ASISTENESCUELA");

                    b.Property<int>("ATENCION");

                    b.Property<int>("BASURA");

                    b.Property<string>("BIENESOTRO");

                    b.Property<bool>("CARNES");

                    b.Property<bool>("CISTERNAS");

                    b.Property<int>("COMIDAS");

                    b.Property<bool>("COMPUTADORAS");

                    b.Property<int>("COMUNITARIO");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Descripcion");

                    b.Property<int>("EDA");

                    b.Property<int>("EMPLEO");

                    b.Property<int>("ESCOLARIDAD");

                    b.Property<int>("ESTATUSMARITAL");

                    b.Property<bool>("ESTUFAS");

                    b.Property<bool>("FAMILIARESS");

                    b.Property<bool>("FRUTASE");

                    b.Property<bool>("HABICHUELASE");

                    b.Property<int>("HACINAMIENTO");

                    b.Property<bool>("HUEVOSE");

                    b.Property<int>("INGRESOS");

                    b.Property<string>("INGRESOSOTRO");

                    b.Property<bool>("INTERESESS");

                    b.Property<int>("IRA");

                    b.Property<bool>("JUBILACIONS");

                    b.Property<bool>("LAVADORAS");

                    b.Property<bool>("LECHES");

                    b.Property<string>("MICROEMPRESAOTRO");

                    b.Property<bool>("MICROEMPRESAS");

                    b.Property<int>("MIEMBROS");

                    b.Property<bool>("NEVERAS");

                    b.Property<int>("NIVELECONOMICO");

                    b.Property<string>("Name");

                    b.Property<bool>("OTROSACTIVIDADS");

                    b.Property<bool>("OTROSBIENESE");

                    b.Property<int>("OTROSINGRESOS");

                    b.Property<bool>("OTROSINGRESOSS");

                    b.Property<bool>("PANE");

                    b.Property<int>("PAREDES");

                    b.Property<string>("PECUARIOOTRO");

                    b.Property<bool>("PECUARIOS");

                    b.Property<int>("PERSONASDORMITORIO");

                    b.Property<int>("PIEZAS");

                    b.Property<int>("PISO");

                    b.Property<bool>("PLATANOS");

                    b.Property<int>("PROPIETARIO");

                    b.Property<int>("PUNTUACIONFINAL");

                    b.Property<long>("PersonId");

                    b.Property<bool>("RADIOS");

                    b.Property<int>("RELIGION");

                    b.Property<bool>("REMESASS");

                    b.Property<int>("SANITARIO");

                    b.Property<int>("TECHO");

                    b.Property<bool>("TELEFONOS");

                    b.Property<bool>("TELEVISORE");

                    b.Property<int>("TIERRAS");

                    b.Property<int>("TIPOEMPLEADOR");

                    b.Property<int>("TIPOVIVIENDA");

                    b.Property<int>("TRABAJOSADICIONALES");

                    b.Property<int>("TRANSPORTE");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<bool>("VEGETALESE");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("EconomicPerfils");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Food", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.FoodBeneficiary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long?>("ComensalId");

                    b.Property<long>("FoodId");

                    b.Property<string>("FoodString");

                    b.Property<string>("Name");

                    b.Property<string>("ParticipantString");

                    b.HasKey("Id");

                    b.HasIndex("ComensalId");

                    b.HasIndex("FoodId");

                    b.ToTable("Comensals");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.FoodDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("FoodId");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("FoodId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FoodDetails");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<int>("Stock");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.MaterialInAndOut", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Details");

                    b.Property<long>("MaterialId");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MaterialInAndOuts");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.MaterialRequisition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("AprubedBy");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("ElaboratedBy");

                    b.Property<string>("From");

                    b.Property<DateTime>("LimitDate");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("PendingLiquidations");

                    b.Property<string>("RequisitorId");

                    b.Property<long>("StatusId");

                    b.Property<string>("To");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("RequisitorId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MaterialRequisitions");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.MaterialRequisitionDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<decimal>("Itbis")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("ItbisAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("ManualMaterial");

                    b.Property<long>("MaterialRequisitionId");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MaterialRequisitionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MaterialRequisitionDetails");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.MemberType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MemberTypes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.ProjectMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("MemberId");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Signature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.SignatureMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("MemberId");

                    b.Property<string>("Name");

                    b.Property<long>("SignatureId");

                    b.Property<long>("SignatureMemberId");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("SignatureId");

                    b.ToTable("SignatureMembers");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Assignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DateEnd")
                        .IsRequired();

                    b.Property<DateTime?>("DateStart")
                        .IsRequired();

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("FilePath");

                    b.Property<long>("GroupId");

                    b.Property<string>("Name");

                    b.Property<long?>("SubjectId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<long>("CourseModalityId");

                    b.Property<long>("CourseTypeId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Imagen");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CourseModalityId");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.CourseModality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CourseModalities");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.CourseType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CourseTypes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Forum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateStart");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<long>("GroupId");

                    b.Property<string>("Name");

                    b.Property<int>("PosiblePoints");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.ForumComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("ForumId");

                    b.Property<string>("Name");

                    b.Property<long?>("StudentId");

                    b.Property<DateTime>("SubmitDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ForumId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ForumComments");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.ForumCommentReply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Feedback");

                    b.Property<long>("ForumCommentId");

                    b.Property<string>("Name");

                    b.Property<int>("Point");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ForumCommentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ForumCommentReplies");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.ForumGrading", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Feedback");

                    b.Property<long>("ForumCommentId");

                    b.Property<int>("Grade");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ForumCommentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ForumGradings");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Grading", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Feedback");

                    b.Property<int>("Grade");

                    b.Property<string>("Name");

                    b.Property<long>("SubmissionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Gradings");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long?>("EmployeeId");

                    b.Property<string>("Name");

                    b.Property<long>("SubjectId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.GroupMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("FilePath");

                    b.Property<long>("GroupId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GroupMessages");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.GroupStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cal1");

                    b.Property<int>("Cal2");

                    b.Property<int>("Cal3");

                    b.Property<int>("Cal4");

                    b.Property<int>("Cal5");

                    b.Property<string>("CalificationNote");

                    b.Property<int>("CommuledPoints");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<int>("FinalPoints");

                    b.Property<long>("GroupId");

                    b.Property<string>("Name");

                    b.Property<string>("Observations");

                    b.Property<long?>("PersonId");

                    b.Property<long>("StudentId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("PersonId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GroupStudents");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateStart");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("FilePath");

                    b.Property<long>("GroupId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.LessonComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("LessonId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("SubmitDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LessonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LessonComments");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.LessonReply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Feedback");

                    b.Property<long>("LessonCommentId");

                    b.Property<string>("Name");

                    b.Property<int>("Point");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LessonCommentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LessonReplies");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Quizz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateStart");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<long>("GroupId");

                    b.Property<string>("Name");

                    b.Property<int>("PosiblePoints");

                    b.Property<int>("QuizzType");

                    b.Property<int>("RepeatTimes");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.QuizzChoise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("IsCorrect");

                    b.Property<string>("Name");

                    b.Property<long>("QuizzQuestionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("QuizzQuestionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("QuizzChoises");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.QuizzQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long>("QuizzId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("QuizzId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("QuizzQuestions");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.QuizzSubmition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectAnswers");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long>("QuizzId");

                    b.Property<int>("Score");

                    b.Property<long?>("StudentId");

                    b.Property<DateTime>("SubmitDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("QuizzId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("QuizzSubmitions");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateStart");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<long?>("GroupId");

                    b.Property<string>("Name");

                    b.Property<long?>("PlaceId");

                    b.Property<long>("ScheduleFormatId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ScheduleFormatId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.School", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long?>("GroupId");

                    b.Property<string>("Name");

                    b.Property<long>("PersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<long>("CourseId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Imagen");

                    b.Property<bool>("IsGeneric");

                    b.Property<int>("MinimumPoints");

                    b.Property<string>("Name");

                    b.Property<string>("Observations");

                    b.Property<int>("PossiblePoints");

                    b.Property<long>("SpecialityId");

                    b.Property<long>("SubjectModalityId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("SubjectModalityId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.SubjectModality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SubjectModalities");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Submission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssignmentId");

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("FilePath");

                    b.Property<string>("Name");

                    b.Property<long?>("StudentId");

                    b.Property<DateTime>("SubmitDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Upload", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Description");

                    b.Property<string>("FilePath");

                    b.Property<long?>("GroupId");

                    b.Property<string>("Name");

                    b.Property<long?>("StudentId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<int>("UploadType");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Uploads");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.UploadComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime>("SubmitDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<long>("UploadId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UploadId");

                    b.ToTable("UploadComments");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Admision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Complicaciones")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("Date")
                        .IsRequired();

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Diagnostico")
                        .HasMaxLength(300);

                    b.Property<string>("DoctorAutorization")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("ExitDoctor")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExitHour");

                    b.Property<bool>("Fuga");

                    b.Property<string>("HallazgosLab")
                        .HasMaxLength(300);

                    b.Property<string>("HallazgosRad")
                        .HasMaxLength(300);

                    b.Property<string>("HistoPatologia")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("Hour");

                    b.Property<bool>("Muerte");

                    b.Property<string>("Name");

                    b.Property<string>("NoAutorizacion")
                        .HasMaxLength(20);

                    b.Property<string>("NurseAdmision")
                        .HasMaxLength(100);

                    b.Property<string>("Observations")
                        .HasMaxLength(500);

                    b.Property<bool>("OrdenMedica");

                    b.Property<string>("OtrosEst")
                        .HasMaxLength(300);

                    b.Property<long?>("PatientId");

                    b.Property<long>("PersonId");

                    b.Property<bool>("Peticion");

                    b.Property<long?>("PlaceId");

                    b.Property<string>("Procedimientos")
                        .HasMaxLength(300);

                    b.Property<string>("Reason")
                        .HasMaxLength(500);

                    b.Property<long>("StatusId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UserAltaId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PatientId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserAltaId");

                    b.ToTable("Admisions");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Allergy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AllergyCategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AllergyCategoryId");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.AllergyCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AllergyCategories");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.AnalyticalSheet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcFolico");

                    b.Property<bool>("AcUrico");

                    b.Property<bool>("AcidoFolico");

                    b.Property<bool>("AcidoUrico");

                    b.Property<bool>("AcidoValproico");

                    b.Property<bool>("Acth");

                    b.Property<bool>("AgAustraliano");

                    b.Property<bool>("Albumina");

                    b.Property<bool>("AlfaAmilasaPancreatica");

                    b.Property<bool>("Alfafetoproteina");

                    b.Property<bool>("Amilasa");

                    b.Property<DateTime?>("AnalyticalSheetDate");

                    b.Property<bool>("AntiHaVlgM");

                    b.Property<bool>("AntiHav");

                    b.Property<bool>("AntiHbc");

                    b.Property<bool>("AntiHbe");

                    b.Property<bool>("AntiHbs");

                    b.Property<bool>("AntiHvc");

                    b.Property<bool>("AntigenosFebriles");

                    b.Property<bool>("AsoCuantitativo");

                    b.Property<bool>("B1");

                    b.Property<bool>("B6");

                    b.Property<bool>("BaciloscopiadeEsputo");

                    b.Property<bool>("BaciloscopiaenOrina");

                    b.Property<bool>("Bd");

                    b.Property<bool>("Bhcg");

                    b.Property<bool>("BhcgCuantitativo");

                    b.Property<bool>("Bi");

                    b.Property<bool>("BilD");

                    b.Property<bool>("BilI");

                    b.Property<bool>("BilTotal");

                    b.Property<bool>("Bilirrubina");

                    b.Property<bool>("Bun");

                    b.Property<bool>("Ca125");

                    b.Property<bool>("Ca153");

                    b.Property<bool>("Ca199");

                    b.Property<bool>("Calcio");

                    b.Property<bool>("Cea");

                    b.Property<bool>("Cetos");

                    b.Property<bool>("ClamidialgG");

                    b.Property<bool>("ClamidialgM");

                    b.Property<bool>("ColesterolTotal");

                    b.Property<bool>("ConteodeEosinofilos");

                    b.Property<bool>("ConteodePlaquetas");

                    b.Property<bool>("ConteodeReticulocitos");

                    b.Property<bool>("Coprocultivo");

                    b.Property<bool>("Coprologico");

                    b.Property<bool>("CortisolAm");

                    b.Property<bool>("CortisolPm");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Creatinina");

                    b.Property<bool>("Cultivo");

                    b.Property<bool>("CultivoSecAbsceso");

                    b.Property<bool>("CultivoSecSemen");

                    b.Property<bool>("CultivoSecUretral");

                    b.Property<bool>("CultivoSecVaginal");

                    b.Property<bool>("CultivoSecdeHerida");

                    b.Property<bool>("CultivoVagin");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("DenguelgG");

                    b.Property<bool>("DenguelgM");

                    b.Property<bool>("DepuraciondeCreatinina");

                    b.Property<bool>("DimeroD");

                    b.Property<string>("DoctorText")
                        .HasMaxLength(50);

                    b.Property<bool>("ElectDeProteinas");

                    b.Property<bool>("ElectroforesisdeHemoglobina");

                    b.Property<bool>("EpsteinBarrlgG");

                    b.Property<bool>("EpsteinBarrlgM");

                    b.Property<bool>("Eritrosedimentacion");

                    b.Property<bool>("Espermatograma");

                    b.Property<bool>("Estradial");

                    b.Property<bool>("Estradiol");

                    b.Property<bool>("EstrogenosTotales");

                    b.Property<bool>("EstudiodeDigestion");

                    b.Property<bool>("Fal");

                    b.Property<bool>("Falcemia");

                    b.Property<bool>("Ferremia");

                    b.Property<bool>("Ferritina");

                    b.Property<bool>("Fibrinogeno");

                    b.Property<bool>("FosAlcalina");

                    b.Property<bool>("Fosforo");

                    b.Property<bool>("FragilidadEntrocitica");

                    b.Property<bool>("Fsh");

                    b.Property<bool>("Ftaabs");

                    b.Property<bool>("Ftabs");

                    b.Property<bool>("Ggpt");

                    b.Property<bool>("Glisemia");

                    b.Property<bool>("Glubotinas");

                    b.Property<bool>("GlucosaAyunas");

                    b.Property<bool>("GlucosaCurvaHoras");

                    b.Property<bool>("GlucosaPostPrandial");

                    b.Property<bool>("Hb");

                    b.Property<bool>("Hba1C");

                    b.Property<bool>("HbeAg");

                    b.Property<bool>("Hbsag");

                    b.Property<bool>("Hcc");

                    b.Property<bool>("Hcg");

                    b.Property<bool>("Hdl");

                    b.Property<bool>("Hemocultivo");

                    b.Property<bool>("HemoglobinaGlicosilada");

                    b.Property<bool>("Hemograma");

                    b.Property<bool>("HerpesIyIIlgG");

                    b.Property<bool>("HerpesIyIIlgM");

                    b.Property<bool>("Hhcg");

                    b.Property<bool>("HierroCaptacionFijacion");

                    b.Property<bool>("Hiv");

                    b.Property<bool>("Homa");

                    b.Property<bool>("HormonadeCrecPostEstimulo");

                    b.Property<bool>("HormonadeCrecimientoBasal");

                    b.Property<bool>("Hto");

                    b.Property<bool>("Igg");

                    b.Property<bool>("Igm");

                    b.Property<bool>("Insulina");

                    b.Property<bool>("InsulinaBasal");

                    b.Property<bool>("InsulinaPostPandrial");

                    b.Property<bool>("InvdeCelulasFalciformes");

                    b.Property<bool>("InvdeHematozoarias");

                    b.Property<bool>("InvdeSangreoculta");

                    b.Property<bool>("Ldh");

                    b.Property<bool>("Ldl");

                    b.Property<bool>("LgAInmunoglobina");

                    b.Property<bool>("LgE");

                    b.Property<bool>("LgGInmunoglobina");

                    b.Property<bool>("LgMInmunoglobina");

                    b.Property<bool>("Lh");

                    b.Property<bool>("Lipasa");

                    b.Property<bool>("LipidosTotales");

                    b.Property<bool>("Litemia");

                    b.Property<bool>("Magnesio");

                    b.Property<bool>("MicroalbuminaCualitativa");

                    b.Property<string>("Name");

                    b.Property<string>("Observations")
                        .HasMaxLength(500);

                    b.Property<bool>("Oh");

                    b.Property<bool>("Orina");

                    b.Property<bool>("Panel4");

                    b.Property<bool>("Paratohormona");

                    b.Property<string>("PatientName")
                        .HasMaxLength(100);

                    b.Property<bool>("PcRdealtaSensibilidad");

                    b.Property<bool>("Pcr");

                    b.Property<bool>("PeptidoC");

                    b.Property<long>("PersonId");

                    b.Property<bool>("Potasio");

                    b.Property<bool>("Progesterona");

                    b.Property<bool>("Prolactina");

                    b.Property<bool>("Proteinas");

                    b.Property<bool>("ProteinasTotales");

                    b.Property<bool>("PruebadeEmbarazo");

                    b.Property<bool>("Pth");

                    b.Property<bool>("RetracciondeCoagulo");

                    b.Property<bool>("RtoGb");

                    b.Property<bool>("Rubeola");

                    b.Property<bool>("Sgotast");

                    b.Property<bool>("Sgptalt");

                    b.Property<bool>("Sodio");

                    b.Property<bool>("T3");

                    b.Property<bool>("T3Libre");

                    b.Property<bool>("T4");

                    b.Property<bool>("T4Libre");

                    b.Property<bool>("Tc");

                    b.Property<bool>("TestdeCommbsDirecto");

                    b.Property<bool>("TestdeCommbsIndirecto");

                    b.Property<bool>("Tg");

                    b.Property<bool>("Tgo");

                    b.Property<bool>("Tgp");

                    b.Property<bool>("TiempodeCoagulacion");

                    b.Property<bool>("TiempodeSangria");

                    b.Property<bool>("TiempodeTrombina");

                    b.Property<bool>("Tipificacion");

                    b.Property<bool>("Tiroglubolina");

                    b.Property<bool>("ToxolgG");

                    b.Property<bool>("ToxolgM");

                    b.Property<bool>("Toxoplasmosis");

                    b.Property<bool>("Tp");

                    b.Property<bool>("Tpt");

                    b.Property<bool>("Transferrina");

                    b.Property<bool>("Trigiceridos");

                    b.Property<bool>("Trigliceridos");

                    b.Property<bool>("Tsh");

                    b.Property<bool>("Ttp");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<bool>("Urea");

                    b.Property<bool>("UreaNitrgenada");

                    b.Property<bool>("UroanalisisCompleto");

                    b.Property<bool>("Urocultivo");

                    b.Property<bool>("VdrLenLcr");

                    b.Property<bool>("Vdrl");

                    b.Property<bool>("VitD");

                    b.Property<bool>("VitaminaB12");

                    b.Property<bool>("Vldl");

                    b.Property<bool>("Vma");

                    b.Property<bool>("Zinc");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AnalyticalSheets");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("DoctorId");

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000);

                    b.Property<long>("PersonId");

                    b.Property<long?>("SpecialityId");

                    b.Property<int?>("TandaId");

                    b.Property<long?>("TandaId1");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<string>("VisitReason")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("WasSend");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("TandaId1");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Bariatric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aburrimiento");

                    b.Property<bool>("Accidente");

                    b.Property<string>("ActualMedication")
                        .HasMaxLength(2000);

                    b.Property<string>("AditionalMedication")
                        .HasMaxLength(2000);

                    b.Property<bool>("Alcohol");

                    b.Property<bool>("Ansiedad");

                    b.Property<bool>("Artropatia");

                    b.Property<bool>("Atracones");

                    b.Property<bool>("Ayuno");

                    b.Property<string>("BandaGastrica")
                        .HasMaxLength(15);

                    b.Property<string>("BodyFat")
                        .HasMaxLength(10);

                    b.Property<string>("BxparaH")
                        .HasMaxLength(100);

                    b.Property<bool>("CPap");

                    b.Property<bool>("Carcinogenas");

                    b.Property<bool>("Cardiopatias");

                    b.Property<bool>("Cirugias");

                    b.Property<string>("Complicaciones")
                        .HasMaxLength(500);

                    b.Property<string>("ComplicacionesPost")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ConsultationDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("Depresion");

                    b.Property<string>("DescripcionTecnica")
                        .HasMaxLength(2000);

                    b.Property<bool>("Diabetes");

                    b.Property<bool>("Dislipemia");

                    b.Property<bool>("Drugs");

                    b.Property<bool>("Dulces");

                    b.Property<string>("Ecocardiograma")
                        .HasMaxLength(100);

                    b.Property<string>("EcodopplerVenoso")
                        .HasMaxLength(100);

                    b.Property<string>("EcografiaAbdominal")
                        .HasMaxLength(100);

                    b.Property<bool>("Ejercicio");

                    b.Property<bool>("Emocional");

                    b.Property<bool>("Enojo");

                    b.Property<string>("EquipoQuirurgico")
                        .HasMaxLength(100);

                    b.Property<string>("Estadia")
                        .HasMaxLength(100);

                    b.Property<string>("EstadiaO")
                        .HasMaxLength(100);

                    b.Property<bool>("FamilaryAlergias");

                    b.Property<bool>("FamilaryCardiopatias");

                    b.Property<string>("FamiliaryComents")
                        .HasMaxLength(2000);

                    b.Property<bool>("FamiliaryDiabetes");

                    b.Property<bool>("FamiliaryHipertension");

                    b.Property<bool>("FamiliaryObesy");

                    b.Property<string>("FamiliaryOthers")
                        .HasMaxLength(500);

                    b.Property<bool>("FamilySupport");

                    b.Property<string>("FuncionalRespiratorio")
                        .HasMaxLength(100);

                    b.Property<bool>("HdLbaja");

                    b.Property<string>("Height")
                        .HasMaxLength(10);

                    b.Property<bool>("Hepatobiliary");

                    b.Property<bool>("Hipertension");

                    b.Property<string>("HistoryComents")
                        .HasMaxLength(2000);

                    b.Property<string>("HorasSemana")
                        .HasMaxLength(100);

                    b.Property<string>("Imc")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("InformativeDate");

                    b.Property<int>("IngestaEmocional");

                    b.Property<bool>("Intolerancia");

                    b.Property<int>("KidsNumber");

                    b.Property<bool>("Laxantes");

                    b.Property<string>("Limitaciones")
                        .HasMaxLength(100);

                    b.Property<bool>("Liquidos");

                    b.Property<string>("Marca")
                        .HasMaxLength(15);

                    b.Property<string>("MaxWeight")
                        .HasMaxLength(25);

                    b.Property<string>("Motivo")
                        .HasMaxLength(100);

                    b.Property<string>("Name");

                    b.Property<string>("NotasNutricional")
                        .HasMaxLength(2000);

                    b.Property<string>("Nro")
                        .HasMaxLength(15);

                    b.Property<string>("NroSerie")
                        .HasMaxLength(100);

                    b.Property<int>("Obesity");

                    b.Property<bool>("ObesyChilds");

                    b.Property<bool>("ObesyKids");

                    b.Property<string>("ObesyYears")
                        .HasMaxLength(25);

                    b.Property<bool>("OtrasDepresion");

                    b.Property<string>("OtrosPreQuirurgico")
                        .HasMaxLength(500);

                    b.Property<long>("PersonId");

                    b.Property<bool>("PhysiologicalDisordersObstainers");

                    b.Property<string>("Polisomnografia")
                        .HasMaxLength(100);

                    b.Property<string>("PreImc")
                        .HasMaxLength(10);

                    b.Property<string>("PreWeight")
                        .HasMaxLength(10);

                    b.Property<string>("ProcedimientosCombinados")
                        .HasMaxLength(100);

                    b.Property<bool>("Purgas");

                    b.Property<bool>("RequirioUti");

                    b.Property<bool>("ResistenciaInsulina");

                    b.Property<string>("RiesgoQuirurgico")
                        .HasMaxLength(100);

                    b.Property<string>("Rxtorax")
                        .HasMaxLength(100);

                    b.Property<bool>("Salados");

                    b.Property<string>("SeriadaGd")
                        .HasMaxLength(100);

                    b.Property<string>("Sgd")
                        .HasMaxLength(100);

                    b.Property<bool>("Soledad");

                    b.Property<bool>("Solidos");

                    b.Property<DateTime?>("SurgeryDate");

                    b.Property<string>("SuturasMecanicas")
                        .HasMaxLength(15);

                    b.Property<bool>("TabTrastornos");

                    b.Property<bool>("Tabaco");

                    b.Property<int>("TecnicaOperatoria");

                    b.Property<string>("TiempQuirurgico")
                        .HasMaxLength(100);

                    b.Property<string>("TipoActividad")
                        .HasMaxLength(500);

                    b.Property<string>("Tolerancia")
                        .HasMaxLength(100);

                    b.Property<bool>("Trastornos");

                    b.Property<bool>("TrastornosEndocrinos");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Veda")
                        .HasMaxLength(100);

                    b.Property<bool>("Vomitos");

                    b.Property<string>("Weight")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Bariatrics");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.BariatricVisit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BariatricId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Imc")
                        .HasMaxLength(25);

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<string>("Nutricion")
                        .HasMaxLength(500);

                    b.Property<string>("Peso")
                        .HasMaxLength(25);

                    b.Property<bool>("Type");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Variacion")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("VisitDate");

                    b.Property<string>("VisitReason")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("BariatricId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BariatricVisits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.BloodType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BloodTypes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.ClinicHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alcohol")
                        .HasMaxLength(4);

                    b.Property<string>("Alucinaciones")
                        .HasMaxLength(4);

                    b.Property<string>("Anhedonia")
                        .HasMaxLength(4);

                    b.Property<string>("AsustaIntimida")
                        .HasMaxLength(4);

                    b.Property<string>("BuenApetito")
                        .HasMaxLength(4);

                    b.Property<string>("CONNERS")
                        .HasMaxLength(4);

                    b.Property<string>("CambioDeseoSexual")
                        .HasMaxLength(4);

                    b.Property<string>("CambioMotriz")
                        .HasMaxLength(4);

                    b.Property<string>("CambioPeso")
                        .HasMaxLength(4);

                    b.Property<string>("CantDrogasFrec")
                        .HasMaxLength(50);

                    b.Property<string>("CantTisanasFrec")
                        .HasMaxLength(50);

                    b.Property<string>("Cesarea")
                        .HasMaxLength(4);

                    b.Property<string>("ComeMucho")
                        .HasMaxLength(4);

                    b.Property<string>("ComePoco")
                        .HasMaxLength(4);

                    b.Property<string>("ComoIntento")
                        .HasMaxLength(250);

                    b.Property<string>("ConformePeso")
                        .HasMaxLength(4);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CuandoInicio")
                        .HasMaxLength(250);

                    b.Property<string>("CuandoIntento")
                        .HasMaxLength(250);

                    b.Property<string>("CulpaOtros")
                        .HasMaxLength(4);

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Delirios")
                        .HasMaxLength(4);

                    b.Property<string>("Describir")
                        .HasMaxLength(250);

                    b.Property<string>("DificultadTomaDecisiones")
                        .HasMaxLength(4);

                    b.Property<string>("Discute")
                        .HasMaxLength(4);

                    b.Property<string>("DoloresAhogo")
                        .HasMaxLength(4);

                    b.Property<string>("Drogas")
                        .HasMaxLength(4);

                    b.Property<string>("EnfermedadesDentales")
                        .HasMaxLength(50);

                    b.Property<string>("EnfermedadesFisicas")
                        .HasMaxLength(50);

                    b.Property<string>("EnfermedadesMentales")
                        .HasMaxLength(50);

                    b.Property<string>("EnfermedadesOtros")
                        .HasMaxLength(50);

                    b.Property<string>("EsCruel")
                        .HasMaxLength(4);

                    b.Property<string>("Escalofrios")
                        .HasMaxLength(4);

                    b.Property<string>("EstacionEspecificar")
                        .HasMaxLength(25);

                    b.Property<string>("EvitaGanarPeso")
                        .HasMaxLength(4);

                    b.Property<string>("EvitaPerderPeso")
                        .HasMaxLength(4);

                    b.Property<string>("FaltaAlientoAsfixia")
                        .HasMaxLength(4);

                    b.Property<string>("FaltaClases")
                        .HasMaxLength(4);

                    b.Property<string>("FaltaEnergia")
                        .HasMaxLength(4);

                    b.Property<string>("FrecuenciaPerderGanarPeso")
                        .HasMaxLength(50);

                    b.Property<string>("FueBuenEstudiante")
                        .HasMaxLength(4);

                    b.Property<string>("GestacionConComplicaciones")
                        .HasMaxLength(4);

                    b.Property<string>("GestacionNormal")
                        .HasMaxLength(4);

                    b.Property<string>("HaCometidoRobos")
                        .HasMaxLength(4);

                    b.Property<string>("HaDestruidoPropiedad")
                        .HasMaxLength(4);

                    b.Property<string>("HaForzadoSexo")
                        .HasMaxLength(4);

                    b.Property<string>("Inapetente")
                        .HasMaxLength(4);

                    b.Property<string>("IniciaPeleas")
                        .HasMaxLength(4);

                    b.Property<string>("Insaciable")
                        .HasMaxLength(4);

                    b.Property<string>("IntentoSuicidio")
                        .HasMaxLength(4);

                    b.Property<string>("Intranquilo")
                        .HasMaxLength(4);

                    b.Property<string>("Iracundo")
                        .HasMaxLength(4);

                    b.Property<string>("Irritabilidad")
                        .HasMaxLength(4);

                    b.Property<string>("Irritable")
                        .HasMaxLength(4);

                    b.Property<string>("LastimaFísicamente")
                        .HasMaxLength(4);

                    b.Property<string>("MOCA")
                        .HasMaxLength(4);

                    b.Property<string>("MecanismosDefensa")
                        .HasMaxLength(50);

                    b.Property<string>("Medicamentos")
                        .HasMaxLength(4);

                    b.Property<string>("MedicamentosFrec")
                        .HasMaxLength(50);

                    b.Property<string>("MiedoMuerte")
                        .HasMaxLength(4);

                    b.Property<string>("MolestaOtros")
                        .HasMaxLength(4);

                    b.Property<string>("Name");

                    b.Property<string>("Nauseas")
                        .HasMaxLength(4);

                    b.Property<string>("NotasPsiquiatricas");

                    b.Property<string>("OtrosHabitosAlimenticios")
                        .HasMaxLength(25);

                    b.Property<string>("Palpitaciones")
                        .HasMaxLength(4);

                    b.Property<string>("PartoNatural")
                        .HasMaxLength(4);

                    b.Property<string>("PerdidaEquilibrio")
                        .HasMaxLength(4);

                    b.Property<long>("PersonId");

                    b.Property<string>("Pesadillos")
                        .HasMaxLength(4);

                    b.Property<string>("PesoActual")
                        .HasMaxLength(10);

                    b.Property<string>("Pica")
                        .HasMaxLength(4);

                    b.Property<string>("PiensaHacerseDanio")
                        .HasMaxLength(4);

                    b.Property<string>("PocoApetito")
                        .HasMaxLength(4);

                    b.Property<string>("ProblemasConcentracion")
                        .HasMaxLength(4);

                    b.Property<string>("QuejasSomaticas")
                        .HasMaxLength(4);

                    b.Property<string>("RAVEN")
                        .HasMaxLength(4);

                    b.Property<string>("SaleTarde")
                        .HasMaxLength(4);

                    b.Property<string>("SeEnoja")
                        .HasMaxLength(4);

                    b.Property<string>("SeRehusa")
                        .HasMaxLength(4);

                    b.Property<string>("SeVenga")
                        .HasMaxLength(4);

                    b.Property<string>("SensacionAhogo")
                        .HasMaxLength(4);

                    b.Property<string>("SensacionMareo")
                        .HasMaxLength(4);

                    b.Property<string>("SentimientosCulpa")
                        .HasMaxLength(4);

                    b.Property<string>("SexualmenteActivo")
                        .HasMaxLength(4);

                    b.Property<string>("SolucionesIntentadas")
                        .HasMaxLength(250);

                    b.Property<string>("Sonambulismo")
                        .HasMaxLength(4);

                    b.Property<string>("Sudoracion")
                        .HasMaxLength(4);

                    b.Property<string>("Sudoracion2")
                        .HasMaxLength(4);

                    b.Property<string>("Te")
                        .HasMaxLength(4);

                    b.Property<string>("TematicaSuenos")
                        .HasMaxLength(50);

                    b.Property<string>("Temblores")
                        .HasMaxLength(4);

                    b.Property<string>("TemorEngordar")
                        .HasMaxLength(4);

                    b.Property<string>("TerroresNocturnos")
                        .HasMaxLength(4);

                    b.Property<string>("TienePareja")
                        .HasMaxLength(4);

                    b.Property<string>("TipologiaA")
                        .HasMaxLength(4);

                    b.Property<string>("TipologiaB")
                        .HasMaxLength(4);

                    b.Property<string>("TipologiaC")
                        .HasMaxLength(4);

                    b.Property<string>("Tranquilo")
                        .HasMaxLength(4);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UtilizaArmas")
                        .HasMaxLength(4);

                    b.Property<string>("UtilizaPreservativo")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ClinicHistories");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Condition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conditions");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long>("PersonId");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.DentalHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BruxismoCentrico")
                        .HasMaxLength(4);

                    b.Property<string>("BruxismoExcentrico")
                        .HasMaxLength(4);

                    b.Property<string>("CantidadDePiezasPerdidas")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CualesPiezas")
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Edentulismo")
                        .HasMaxLength(4);

                    b.Property<string>("Gingivitis")
                        .HasMaxLength(4);

                    b.Property<string>("Name");

                    b.Property<string>("Periodontitis")
                        .HasMaxLength(4);

                    b.Property<long>("PersonId");

                    b.Property<string>("Ulcerativa")
                        .HasMaxLength(4);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("DentalHistories");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Diagnostic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long?>("DiagnosticId");

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long?>("PatientId");

                    b.Property<long>("PersonId");

                    b.Property<int>("Severity");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DiagnosticId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Diagnostics");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.DiagnosticCategoryCie10", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DiagnosticCategoryCie10s");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.DiagnosticCie10", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<long>("DiagnosticCategoryId");

                    b.Property<string>("FatherCode");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticCategoryId");

                    b.ToTable("DiagnosticCies");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Cmd");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Exequartur");

                    b.Property<string>("Name");

                    b.Property<long>("PersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Emergency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accident");

                    b.Property<bool>("Aggression");

                    b.Property<bool>("Alergies");

                    b.Property<string>("AlergiesDetails")
                        .HasMaxLength(500);

                    b.Property<string>("Antecedentes")
                        .HasMaxLength(1000);

                    b.Property<string>("AttentionWhere")
                        .HasMaxLength(200);

                    b.Property<bool>("Clinic");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("Date")
                        .IsRequired();

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Diagnostic")
                        .HasMaxLength(1000);

                    b.Property<string>("DoctorAutorization")
                        .HasMaxLength(100);

                    b.Property<bool>("DriveAccidend");

                    b.Property<string>("Ekg")
                        .HasMaxLength(1000);

                    b.Property<string>("Fc")
                        .HasMaxLength(50);

                    b.Property<bool>("Fight");

                    b.Property<string>("Fr")
                        .HasMaxLength(50);

                    b.Property<bool>("General");

                    b.Property<bool>("Glisemia");

                    b.Property<bool>("Hemograma");

                    b.Property<DateTime?>("Hour");

                    b.Property<bool>("Inmovilizacion");

                    b.Property<bool>("LaboralAccident");

                    b.Property<bool>("Maternidad");

                    b.Property<string>("Name");

                    b.Property<bool>("Nebulization");

                    b.Property<string>("NurseAdmision")
                        .HasMaxLength(100);

                    b.Property<string>("Observations")
                        .HasMaxLength(1000);

                    b.Property<string>("OriginOther")
                        .HasMaxLength(1000);

                    b.Property<bool>("Orina");

                    b.Property<string>("Others")
                        .HasMaxLength(200);

                    b.Property<string>("OthersEmergency")
                        .HasMaxLength(200);

                    b.Property<long>("PersonId");

                    b.Property<long>("PlaceId");

                    b.Property<bool>("PregnantTest");

                    b.Property<bool>("PreviousAttention");

                    b.Property<string>("Pulse")
                        .HasMaxLength(50);

                    b.Property<string>("Radiographics")
                        .HasMaxLength(1000);

                    b.Property<bool>("Reanimation");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000);

                    b.Property<bool>("Satura");

                    b.Property<string>("Sonographics")
                        .HasMaxLength(1000);

                    b.Property<long>("StatusId");

                    b.Property<string>("Ta")
                        .HasMaxLength(50);

                    b.Property<string>("Temp")
                        .HasMaxLength(50);

                    b.Property<string>("Test")
                        .HasMaxLength(1000);

                    b.Property<string>("TestComments")
                        .HasMaxLength(1000);

                    b.Property<string>("Unid911");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Emergencies");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Endocrine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abdomen")
                        .HasMaxLength(500);

                    b.Property<string>("Abortions")
                        .HasMaxLength(50);

                    b.Property<bool>("Acv");

                    b.Property<bool>("Alcohol");

                    b.Property<bool>("Alergies");

                    b.Property<string>("AliveChilds")
                        .HasMaxLength(50);

                    b.Property<bool>("Analgesicos");

                    b.Property<bool>("Antiagregantes");

                    b.Property<bool>("Antiarritmicos");

                    b.Property<bool>("Antibioticos");

                    b.Property<bool>("Anticoagulantes");

                    b.Property<bool>("Anticonceptivos");

                    b.Property<bool>("Antiinflamatorios");

                    b.Property<bool>("Arritmias");

                    b.Property<bool>("Asma");

                    b.Property<string>("BornedDead")
                        .HasMaxLength(50);

                    b.Property<string>("Caesarean")
                        .HasMaxLength(50);

                    b.Property<bool>("Cancer");

                    b.Property<bool>("Cardiopatia");

                    b.Property<string>("ChestXray")
                        .HasMaxLength(500);

                    b.Property<bool>("Coffee");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Creatinina")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("CreationDate");

                    b.Property<string>("Cuello")
                        .HasMaxLength(100);

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("Diabetes");

                    b.Property<bool>("Disnea");

                    b.Property<bool>("Dpn");

                    b.Property<string>("Echocardiogram")
                        .HasMaxLength(500);

                    b.Property<bool>("Edema");

                    b.Property<string>("Electrocardiograph")
                        .HasMaxLength(500);

                    b.Property<bool>("EnfHepaticas");

                    b.Property<bool>("EnfRenal");

                    b.Property<bool>("Esteroides");

                    b.Property<string>("EvolCaso")
                        .HasMaxLength(1000);

                    b.Property<string>("ExOrina")
                        .HasMaxLength(15);

                    b.Property<string>("Fc")
                        .HasMaxLength(15);

                    b.Property<string>("Forceps")
                        .HasMaxLength(50);

                    b.Property<string>("Fr")
                        .HasMaxLength(15);

                    b.Property<string>("Gb")
                        .HasMaxLength(15);

                    b.Property<string>("Gestas")
                        .HasMaxLength(50);

                    b.Property<string>("Glicemia")
                        .HasMaxLength(15);

                    b.Property<string>("Hb")
                        .HasMaxLength(15);

                    b.Property<string>("Hbsag")
                        .HasMaxLength(15);

                    b.Property<string>("Hcto")
                        .HasMaxLength(15);

                    b.Property<string>("Hearth")
                        .HasMaxLength(500);

                    b.Property<bool>("Hipotensores");

                    b.Property<bool>("Hta");

                    b.Property<bool>("Icc");

                    b.Property<bool>("IlegalSustances");

                    b.Property<string>("Inr")
                        .HasMaxLength(15);

                    b.Property<string>("LastPregnant")
                        .HasMaxLength(50);

                    b.Property<string>("LowerExtremities")
                        .HasMaxLength(500);

                    b.Property<string>("Lungs")
                        .HasMaxLength(500);

                    b.Property<string>("MotConsulta")
                        .HasMaxLength(1000);

                    b.Property<string>("Name");

                    b.Property<string>("Neurological")
                        .HasMaxLength(500);

                    b.Property<bool>("Obecy");

                    b.Property<string>("Obs")
                        .HasMaxLength(1000);

                    b.Property<string>("Observations")
                        .HasMaxLength(100);

                    b.Property<bool>("Ortopnea");

                    b.Property<string>("OtherCardio")
                        .HasMaxLength(500);

                    b.Property<string>("OtherMedicaments")
                        .HasMaxLength(500);

                    b.Property<string>("Others")
                        .HasMaxLength(500);

                    b.Property<string>("OthersPersonal")
                        .HasMaxLength(500);

                    b.Property<string>("OthersToxic")
                        .HasMaxLength(500);

                    b.Property<bool>("Palpitaciones");

                    b.Property<string>("PatientRisk")
                        .HasMaxLength(100);

                    b.Property<long>("PersonId");

                    b.Property<string>("Plaquetas")
                        .HasMaxLength(15);

                    b.Property<string>("Pregnancies")
                        .HasMaxLength(50);

                    b.Property<string>("PrematureChilds")
                        .HasMaxLength(50);

                    b.Property<string>("PresurgicalDiagnosis")
                        .HasMaxLength(100);

                    b.Property<string>("PreviousSurgeries")
                        .HasMaxLength(150);

                    b.Property<string>("Procedure")
                        .HasMaxLength(100);

                    b.Property<string>("ProcedureRisk")
                        .HasMaxLength(100);

                    b.Property<bool>("Smoke");

                    b.Property<string>("SuperiorLimbs")
                        .HasMaxLength(500);

                    b.Property<string>("Ta")
                        .HasMaxLength(15);

                    b.Property<string>("Tgo")
                        .HasMaxLength(15);

                    b.Property<string>("Tgp")
                        .HasMaxLength(15);

                    b.Property<string>("Torax")
                        .HasMaxLength(100);

                    b.Property<bool>("ToraxPain");

                    b.Property<bool>("Tos");

                    b.Property<string>("Tp")
                        .HasMaxLength(15);

                    b.Property<string>("Tpt")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<bool>("Valvulopatia");

                    b.Property<bool>("VascularPeriferic");

                    b.Property<string>("Vhc")
                        .HasMaxLength(15);

                    b.Property<string>("Vih")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Endocrines");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.General", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accidents")
                        .HasMaxLength(500);

                    b.Property<bool>("Alcohol");

                    b.Property<string>("Alergys")
                        .HasMaxLength(500);

                    b.Property<string>("AntFamiliar")
                        .HasMaxLength(500);

                    b.Property<string>("AntPersonales")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("Diabetes");

                    b.Property<bool>("Drugs");

                    b.Property<string>("Enfermedades")
                        .HasMaxLength(500);

                    b.Property<string>("Food")
                        .HasMaxLength(500);

                    b.Property<string>("Fracturas")
                        .HasMaxLength(500);

                    b.Property<string>("Incapacidades")
                        .HasMaxLength(500);

                    b.Property<string>("InfanciaEnferma")
                        .HasMaxLength(500);

                    b.Property<string>("Medicaments")
                        .HasMaxLength(500);

                    b.Property<string>("Menstruacion")
                        .HasMaxLength(500);

                    b.Property<string>("Name");

                    b.Property<string>("NoQuirurgicas")
                        .HasMaxLength(500);

                    b.Property<string>("Observations")
                        .HasMaxLength(2000);

                    b.Property<string>("Pasatiempos")
                        .HasMaxLength(500);

                    b.Property<long>("PersonId");

                    b.Property<string>("Piel")
                        .HasMaxLength(500);

                    b.Property<string>("Psiquiatria")
                        .HasMaxLength(500);

                    b.Property<string>("Respiracion")
                        .HasMaxLength(500);

                    b.Property<string>("Sports")
                        .HasMaxLength(500);

                    b.Property<string>("Sugeries")
                        .HasMaxLength(500);

                    b.Property<bool>("Tobaco");

                    b.Property<string>("Traumatismos")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Urinarias")
                        .HasMaxLength(500);

                    b.Property<string>("Work")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Generals");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.GeneralAfection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conclusion")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Indications")
                        .HasMaxLength(500);

                    b.Property<string>("Labs")
                        .HasMaxLength(500);

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<long>("PersonId");

                    b.Property<string>("PhysicalExam")
                        .HasMaxLength(500);

                    b.Property<string>("Symptoms")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<string>("VisitReason")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GeneralAfections");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.GeneralAfectionVisit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Altura");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Diagnostic")
                        .HasMaxLength(500);

                    b.Property<long>("GeneralAfectionId");

                    b.Property<string>("Indications")
                        .HasMaxLength(500);

                    b.Property<string>("Labs")
                        .HasMaxLength(500);

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<int>("Peso");

                    b.Property<string>("PhysicalExam")
                        .HasMaxLength(500);

                    b.Property<int>("PresionArterial");

                    b.Property<int>("PresionArterialDiast");

                    b.Property<int>("PresionArterialSist");

                    b.Property<int>("Pulsaciones");

                    b.Property<string>("Revision")
                        .HasMaxLength(500);

                    b.Property<int>("RitmoResp");

                    b.Property<int>("Temp");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<string>("VisitReason")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("VitalSign")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GeneralAfectionId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GeneralAfectionVisits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.GeneralVisit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Altura");

                    b.Property<string>("Conclusion")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Diagnostic")
                        .HasMaxLength(500);

                    b.Property<long>("GeneralId");

                    b.Property<string>("Indications")
                        .HasMaxLength(500);

                    b.Property<string>("Labs")
                        .HasMaxLength(500);

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<int>("Peso");

                    b.Property<string>("PhysicalExam")
                        .HasMaxLength(500);

                    b.Property<int>("PresionArterial");

                    b.Property<int>("PresionArterialDiast");

                    b.Property<int>("PresionArterialSist");

                    b.Property<int>("Pulsaciones");

                    b.Property<string>("Revision")
                        .HasMaxLength(500);

                    b.Property<int>("RitmoResp");

                    b.Property<int>("Temp");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<string>("VisitReason")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("VitalSign")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GeneralId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GeneralVisits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Gynecology", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abortions")
                        .HasMaxLength(50);

                    b.Property<string>("ActualUse")
                        .HasMaxLength(50);

                    b.Property<string>("AliveChilds")
                        .HasMaxLength(50);

                    b.Property<string>("Barrier")
                        .HasMaxLength(50);

                    b.Property<string>("BornedDead")
                        .HasMaxLength(50);

                    b.Property<string>("Caesarean")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Div")
                        .HasMaxLength(50);

                    b.Property<string>("Dysmenorrhoea")
                        .HasMaxLength(50);

                    b.Property<string>("FirstSexualRelation")
                        .HasMaxLength(50);

                    b.Property<string>("Forceps")
                        .HasMaxLength(50);

                    b.Property<string>("Gestas")
                        .HasMaxLength(50);

                    b.Property<string>("LabsResult")
                        .HasMaxLength(2000);

                    b.Property<string>("LastPregnant")
                        .HasMaxLength(50);

                    b.Property<string>("MarriedTime")
                        .HasMaxLength(50);

                    b.Property<string>("Menarche")
                        .HasMaxLength(500);

                    b.Property<string>("MenstrualPatron")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<string>("NoSexualPartners")
                        .HasMaxLength(50);

                    b.Property<string>("Norplat")
                        .HasMaxLength(50);

                    b.Property<string>("Observations")
                        .HasMaxLength(2000);

                    b.Property<string>("Oral")
                        .HasMaxLength(50);

                    b.Property<string>("PastUse")
                        .HasMaxLength(50);

                    b.Property<long>("PersonId");

                    b.Property<string>("Pregnancies")
                        .HasMaxLength(50);

                    b.Property<string>("PrematureChilds")
                        .HasMaxLength(50);

                    b.Property<string>("Pubarquia")
                        .HasMaxLength(500);

                    b.Property<string>("SexualRelationPerWeek")
                        .HasMaxLength(50);

                    b.Property<string>("Telarquia")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Gynecologies");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.GynecologyVisit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conclusion")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("GynecologyId");

                    b.Property<string>("Indications")
                        .HasMaxLength(500);

                    b.Property<string>("Name");

                    b.Property<string>("Symptoms")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("VisitDate");

                    b.Property<string>("VisitReason")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("GynecologyId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GynecologyVisits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Insurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AditionalInfo")
                        .HasMaxLength(400);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name");

                    b.Property<string>("Rnc")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Kid", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressSchool")
                        .HasMaxLength(150);

                    b.Property<string>("BornPlace")
                        .HasMaxLength(100);

                    b.Property<long?>("CourseId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DificultSubject")
                        .HasMaxLength(150);

                    b.Property<bool>("Fired");

                    b.Property<bool>("HasLostSchoolarYear");

                    b.Property<string>("MedicalPlace")
                        .HasMaxLength(150);

                    b.Property<string>("Name");

                    b.Property<int>("NoBrothers");

                    b.Property<string>("PediatricName")
                        .HasMaxLength(150);

                    b.Property<long>("PersonId");

                    b.Property<string>("Place")
                        .HasMaxLength(150);

                    b.Property<long?>("SchoolId");

                    b.Property<string>("SchoolStr")
                        .HasMaxLength(150);

                    b.Property<long>("TandaId");

                    b.Property<string>("TelSchool")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("WhoLive")
                        .HasMaxLength(150);

                    b.Property<string>("WhoSleep")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TandaId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Kids");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.LabClasification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comentary")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LabClasifications");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Laboratory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Comentary")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<int?>("LabClasificationId");

                    b.Property<long?>("LabClasificationId1");

                    b.Property<string>("Methods")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<int>("OwnerId");

                    b.Property<long?>("OwnerId1");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Unids")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LabClasificationId1");

                    b.HasIndex("OwnerId1");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.LaboratoryResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ASO")
                        .HasMaxLength(25);

                    b.Property<string>("AcFolico")
                        .HasMaxLength(25);

                    b.Property<string>("AcUrico")
                        .HasMaxLength(25);

                    b.Property<string>("Acetona")
                        .HasMaxLength(25);

                    b.Property<string>("Albumina")
                        .HasMaxLength(25);

                    b.Property<string>("AlbuminaQ")
                        .HasMaxLength(25);

                    b.Property<string>("Amilasa")
                        .HasMaxLength(25);

                    b.Property<string>("Aspecto")
                        .HasMaxLength(25);

                    b.Property<string>("B1")
                        .HasMaxLength(25);

                    b.Property<string>("B12")
                        .HasMaxLength(25);

                    b.Property<string>("B6")
                        .HasMaxLength(25);

                    b.Property<string>("Bacterias")
                        .HasMaxLength(25);

                    b.Property<string>("Banda")
                        .HasMaxLength(25);

                    b.Property<string>("Basofilos")
                        .HasMaxLength(25);

                    b.Property<string>("Bil")
                        .HasMaxLength(25);

                    b.Property<string>("Bilirrubina")
                        .HasMaxLength(25);

                    b.Property<string>("BrucelaAbortus")
                        .HasMaxLength(25);

                    b.Property<string>("CKMB")
                        .HasMaxLength(25);

                    b.Property<string>("Calcio")
                        .HasMaxLength(25);

                    b.Property<string>("CdeEosinofilos")
                        .HasMaxLength(25);

                    b.Property<string>("CdePlaquetas")
                        .HasMaxLength(25);

                    b.Property<string>("CdeReticulocitos")
                        .HasMaxLength(25);

                    b.Property<string>("CelEpiteliales")
                        .HasMaxLength(25);

                    b.Property<string>("CelFalciformes")
                        .HasMaxLength(25);

                    b.Property<string>("CelJuveniles")
                        .HasMaxLength(25);

                    b.Property<string>("Chcm")
                        .HasMaxLength(25);

                    b.Property<string>("Cilindros")
                        .HasMaxLength(25);

                    b.Property<string>("Ck")
                        .HasMaxLength(25);

                    b.Property<string>("Colesterol")
                        .HasMaxLength(25);

                    b.Property<string>("Color")
                        .HasMaxLength(25);

                    b.Property<string>("ComentAntigenos")
                        .HasMaxLength(25);

                    b.Property<string>("ComentOrinaCop")
                        .HasMaxLength(25);

                    b.Property<string>("ComentQuimica")
                        .HasMaxLength(25);

                    b.Property<string>("ComentariosRecuento")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Creatinina")
                        .HasMaxLength(25);

                    b.Property<string>("Cristales")
                        .HasMaxLength(25);

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Densidad")
                        .HasMaxLength(25);

                    b.Property<string>("Directa")
                        .HasMaxLength(25);

                    b.Property<string>("Eosinofilos")
                        .HasMaxLength(25);

                    b.Property<string>("Eritrosedimentacion")
                        .HasMaxLength(25);

                    b.Property<string>("ExtdeSangPeriferica")
                        .HasMaxLength(25);

                    b.Property<string>("FactorRH")
                        .HasMaxLength(25);

                    b.Property<string>("FactorReumatoide")
                        .HasMaxLength(25);

                    b.Property<string>("Fal")
                        .HasMaxLength(25);

                    b.Property<string>("Ferremia")
                        .HasMaxLength(25);

                    b.Property<string>("FibMucosas")
                        .HasMaxLength(25);

                    b.Property<string>("FosfatasaAcida")
                        .HasMaxLength(25);

                    b.Property<string>("FosfatasaAlcalina")
                        .HasMaxLength(25);

                    b.Property<string>("GBlancos")
                        .HasMaxLength(25);

                    b.Property<string>("GRojos")
                        .HasMaxLength(25);

                    b.Property<string>("Gb")
                        .HasMaxLength(25);

                    b.Property<string>("Glicemia")
                        .HasMaxLength(25);

                    b.Property<string>("Globulina")
                        .HasMaxLength(25);

                    b.Property<string>("Glucemia")
                        .HasMaxLength(25);

                    b.Property<string>("Glucosa")
                        .HasMaxLength(25);

                    b.Property<string>("Gr")
                        .HasMaxLength(25);

                    b.Property<string>("Grs")
                        .HasMaxLength(25);

                    b.Property<string>("HIV")
                        .HasMaxLength(25);

                    b.Property<string>("HPilory")
                        .HasMaxLength(25);

                    b.Property<string>("HVC")
                        .HasMaxLength(25);

                    b.Property<string>("Hb")
                        .HasMaxLength(25);

                    b.Property<string>("HbA1C")
                        .HasMaxLength(25);

                    b.Property<string>("HbGlucosilada")
                        .HasMaxLength(25);

                    b.Property<string>("Hcm")
                        .HasMaxLength(25);

                    b.Property<string>("Hdl")
                        .HasMaxLength(25);

                    b.Property<string>("Hematozoarios")
                        .HasMaxLength(25);

                    b.Property<string>("HepatitisB")
                        .HasMaxLength(25);

                    b.Property<string>("HepatitisC")
                        .HasMaxLength(25);

                    b.Property<string>("Homa")
                        .HasMaxLength(25);

                    b.Property<string>("Hto")
                        .HasMaxLength(25);

                    b.Property<string>("Huevos")
                        .HasMaxLength(25);

                    b.Property<string>("Indirecta")
                        .HasMaxLength(25);

                    b.Property<string>("Insulina")
                        .HasMaxLength(25);

                    b.Property<string>("InvdeAmebas")
                        .HasMaxLength(25);

                    b.Property<string>("LDH")
                        .HasMaxLength(25);

                    b.Property<string>("Ldl")
                        .HasMaxLength(25);

                    b.Property<string>("Levaduras")
                        .HasMaxLength(25);

                    b.Property<string>("Linfocitos")
                        .HasMaxLength(25);

                    b.Property<string>("Lipasa")
                        .HasMaxLength(25);

                    b.Property<string>("Magnesio")
                        .HasMaxLength(25);

                    b.Property<string>("Monocitos")
                        .HasMaxLength(25);

                    b.Property<string>("Name");

                    b.Property<string>("Nitrito")
                        .HasMaxLength(25);

                    b.Property<string>("Notes")
                        .HasMaxLength(500);

                    b.Property<string>("Olor")
                        .HasMaxLength(25);

                    b.Property<string>("OtrosCop")
                        .HasMaxLength(25);

                    b.Property<string>("PCR")
                        .HasMaxLength(25);

                    b.Property<string>("Parasitos")
                        .HasMaxLength(25);

                    b.Property<string>("ParatyphiA")
                        .HasMaxLength(25);

                    b.Property<string>("ParatyphiB")
                        .HasMaxLength(25);

                    b.Property<long>("PersonId");

                    b.Property<string>("Ph")
                        .HasMaxLength(25);

                    b.Property<string>("ProteinaTotal")
                        .HasMaxLength(25);

                    b.Property<string>("Proteinas")
                        .HasMaxLength(25);

                    b.Property<string>("ProteusOxig")
                        .HasMaxLength(25);

                    b.Property<string>("PruebdeEmbarazo")
                        .HasMaxLength(25);

                    b.Property<string>("Pth")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("RealizationDate");

                    b.Property<string>("RelacionAG")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ResultDate");

                    b.Property<string>("RtoGb")
                        .HasMaxLength(25);

                    b.Property<string>("SGOT")
                        .HasMaxLength(25);

                    b.Property<string>("SGPT")
                        .HasMaxLength(25);

                    b.Property<string>("SalmonelaThupiO")
                        .HasMaxLength(25);

                    b.Property<string>("SalmonelaTyphiH")
                        .HasMaxLength(25);

                    b.Property<string>("SangOculta")
                        .HasMaxLength(25);

                    b.Property<string>("SangOcultaCop")
                        .HasMaxLength(25);

                    b.Property<string>("Segmentados")
                        .HasMaxLength(25);

                    b.Property<string>("TP")
                        .HasMaxLength(25);

                    b.Property<string>("TSanguinea")
                        .HasMaxLength(25);

                    b.Property<string>("TdeCoagulacion")
                        .HasMaxLength(25);

                    b.Property<string>("TdeSangria")
                        .HasMaxLength(25);

                    b.Property<string>("Tg")
                        .HasMaxLength(25);

                    b.Property<string>("Tgo")
                        .HasMaxLength(25);

                    b.Property<string>("Tgp")
                        .HasMaxLength(25);

                    b.Property<string>("Total")
                        .HasMaxLength(25);

                    b.Property<string>("ToxoIGG")
                        .HasMaxLength(25);

                    b.Property<string>("ToxoIGM")
                        .HasMaxLength(25);

                    b.Property<string>("Tpt")
                        .HasMaxLength(25);

                    b.Property<string>("Trigliceridos")
                        .HasMaxLength(25);

                    b.Property<string>("Tsh")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Urea")
                        .HasMaxLength(25);

                    b.Property<string>("Urobilinogeno")
                        .HasMaxLength(25);

                    b.Property<string>("VDRL")
                        .HasMaxLength(25);

                    b.Property<string>("VLDL")
                        .HasMaxLength(25);

                    b.Property<string>("Vcm")
                        .HasMaxLength(25);

                    b.Property<string>("VitD")
                        .HasMaxLength(25);

                    b.Property<string>("Zinc")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LaboratoryResult");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.MedicalCertificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Affections")
                        .HasMaxLength(1000);

                    b.Property<string>("Cmd")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DoctorText")
                        .HasMaxLength(50);

                    b.Property<string>("Exequartur")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("MedicalCertificateDate");

                    b.Property<string>("Name");

                    b.Property<string>("PatientName")
                        .HasMaxLength(200);

                    b.Property<long>("PersonId");

                    b.Property<string>("Place")
                        .HasMaxLength(100);

                    b.Property<string>("Recomendations")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MedicalCertificates");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.MultiaxialHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CondicionesMedicas");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("MarcoTiempo")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<string>("OtrosProblemasPsicosociales")
                        .HasMaxLength(250);

                    b.Property<long>("PersonId");

                    b.Property<string>("ProblemasAccesoSalud")
                        .HasMaxLength(250);

                    b.Property<string>("ProblemasAmbienteSocial")
                        .HasMaxLength(250);

                    b.Property<string>("ProblemasEconomicos")
                        .HasMaxLength(250);

                    b.Property<string>("ProblemasEducativos")
                        .HasMaxLength(250);

                    b.Property<string>("ProblemasGrupoApoyo")
                        .HasMaxLength(250);

                    b.Property<string>("ProblemasInteraccionLegal")
                        .HasMaxLength(250);

                    b.Property<string>("ProblemasOcupacionales")
                        .HasMaxLength(250);

                    b.Property<string>("ProblemasVivienda")
                        .HasMaxLength(250);

                    b.Property<string>("Puntuacion")
                        .HasMaxLength(50);

                    b.Property<string>("TrastornosClinicos");

                    b.Property<string>("TrastornosPersonalidad");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MultiaxialHistories");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Obstetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("A")
                        .HasMaxLength(50);

                    b.Property<string>("Allergies")
                        .HasMaxLength(500);

                    b.Property<string>("App")
                        .HasMaxLength(500);

                    b.Property<string>("BornObservations")
                        .HasMaxLength(2000);

                    b.Property<string>("C")
                        .HasMaxLength(50);

                    b.Property<string>("Coombs")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Dmg")
                        .HasMaxLength(50);

                    b.Property<string>("E")
                        .HasMaxLength(50);

                    b.Property<string>("Electrophoresis")
                        .HasMaxLength(50);

                    b.Property<string>("Falcemia")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Fpp");

                    b.Property<string>("FstTt")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Fum");

                    b.Property<string>("Gesta")
                        .HasMaxLength(50);

                    b.Property<string>("Glycemia")
                        .HasMaxLength(50);

                    b.Property<string>("Hb")
                        .HasMaxLength(50);

                    b.Property<string>("HbsAg")
                        .HasMaxLength(50);

                    b.Property<string>("Hiv")
                        .HasMaxLength(50);

                    b.Property<string>("Hvc")
                        .HasMaxLength(50);

                    b.Property<string>("InductionLungMaturity")
                        .HasMaxLength(50);

                    b.Property<string>("LastPregnant")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<string>("P")
                        .HasMaxLength(50);

                    b.Property<long>("PersonId");

                    b.Property<string>("Plaq")
                        .HasMaxLength(50);

                    b.Property<string>("SndTt")
                        .HasMaxLength(50);

                    b.Property<string>("Sonography")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Urine")
                        .HasMaxLength(50);

                    b.Property<string>("Vdrl")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Obstetrics");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.ObstetricVisit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuSem")
                        .HasMaxLength(50);

                    b.Property<string>("Conclusion")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Edema")
                        .HasMaxLength(50);

                    b.Property<string>("Fcf")
                        .HasMaxLength(50);

                    b.Property<string>("GestationalAge")
                        .HasMaxLength(50);

                    b.Property<string>("Indications")
                        .HasMaxLength(500);

                    b.Property<string>("Name");

                    b.Property<long>("ObstetricId");

                    b.Property<string>("Pounds")
                        .HasMaxLength(50);

                    b.Property<string>("Present")
                        .HasMaxLength(50);

                    b.Property<string>("Symptoms")
                        .HasMaxLength(500);

                    b.Property<string>("Tammhg")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Varicose")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ObstetricId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ObstetricVisits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alergies")
                        .HasMaxLength(150);

                    b.Property<string>("Companion");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Illness")
                        .HasMaxLength(150);

                    b.Property<string>("MedicamentationTime")
                        .HasMaxLength(150);

                    b.Property<string>("Medicaments")
                        .HasMaxLength(150);

                    b.Property<string>("Name");

                    b.Property<long>("PersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.PatientAllergy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AllergyId");

                    b.Property<bool>("Anaemia");

                    b.Property<bool>("Anaphylaxis");

                    b.Property<bool>("Angioedema");

                    b.Property<bool>("Arrhythmia");

                    b.Property<bool>("Bronchospasm");

                    b.Property<bool>("Cough");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("Diarrhea");

                    b.Property<bool>("Dystonia");

                    b.Property<bool>("Fever");

                    b.Property<bool>("Flushing");

                    b.Property<bool>("GiUpset");

                    b.Property<bool>("Headache");

                    b.Property<bool>("Hepatotoxicity");

                    b.Property<bool>("Hives");

                    b.Property<bool>("Hypertension");

                    b.Property<bool>("Itching");

                    b.Property<bool>("MentalStatusChange");

                    b.Property<bool>("MuscoloskeletalPain");

                    b.Property<bool>("Myalgia");

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("PersonId");

                    b.Property<bool>("Rash");

                    b.Property<int>("Severity");

                    b.Property<bool>("Unknown");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.PatientDiagnostic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long?>("DiagnosticId");

                    b.Property<string>("Name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("PersonId");

                    b.Property<int>("Severity");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("DiagnosticId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PatientDiagnostics");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Pediatric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abortos")
                        .HasMaxLength(25);

                    b.Property<string>("Alergia")
                        .HasMaxLength(25);

                    b.Property<string>("Alimentacion")
                        .HasMaxLength(50);

                    b.Property<string>("AliveKids")
                        .HasMaxLength(25);

                    b.Property<string>("Amebiasis")
                        .HasMaxLength(25);

                    b.Property<string>("Amigdalitis")
                        .HasMaxLength(25);

                    b.Property<string>("AnomaliasCongenitas")
                        .HasMaxLength(25);

                    b.Property<string>("Apendicitis")
                        .HasMaxLength(25);

                    b.Property<string>("Apgar2")
                        .HasMaxLength(50);

                    b.Property<int>("BloodTypeId");

                    b.Property<string>("BornConditions")
                        .HasMaxLength(50);

                    b.Property<string>("BornPounds")
                        .HasMaxLength(25);

                    b.Property<string>("Brothers")
                        .HasMaxLength(100);

                    b.Property<string>("Camino")
                        .HasMaxLength(25);

                    b.Property<string>("Cesarea")
                        .HasMaxLength(25);

                    b.Property<string>("Cianosis")
                        .HasMaxLength(50);

                    b.Property<string>("Colicos")
                        .HasMaxLength(50);

                    b.Property<string>("Constipacion")
                        .HasMaxLength(25);

                    b.Property<string>("ControlIntestinos")
                        .HasMaxLength(25);

                    b.Property<string>("ControlVesical")
                        .HasMaxLength(25);

                    b.Property<string>("Convulciones")
                        .HasMaxLength(50);

                    b.Property<string>("ConvulcionesPersonales")
                        .HasMaxLength(25);

                    b.Property<string>("Convulsiones")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Dengue")
                        .HasMaxLength(25);

                    b.Property<string>("Diabetes")
                        .HasMaxLength(25);

                    b.Property<string>("Diarrea")
                        .HasMaxLength(25);

                    b.Property<string>("DietaActual")
                        .HasMaxLength(25);

                    b.Property<string>("Difteria")
                        .HasMaxLength(25);

                    b.Property<string>("Escarlatina")
                        .HasMaxLength(25);

                    b.Property<string>("Father")
                        .HasMaxLength(50);

                    b.Property<string>("FiebreEumatica")
                        .HasMaxLength(25);

                    b.Property<string>("FirstWords")
                        .HasMaxLength(25);

                    b.Property<string>("Formulas")
                        .HasMaxLength(50);

                    b.Property<string>("FracesCortas")
                        .HasMaxLength(25);

                    b.Property<string>("FrstWeekConditions")
                        .HasMaxLength(50);

                    b.Property<string>("Gesta")
                        .HasMaxLength(25);

                    b.Property<string>("HabitosAlimenticios")
                        .HasMaxLength(50);

                    b.Property<string>("Ictericia")
                        .HasMaxLength(50);

                    b.Property<string>("Infomatec")
                        .HasMaxLength(25);

                    b.Property<string>("Irs")
                        .HasMaxLength(25);

                    b.Property<string>("LabsResult")
                        .HasMaxLength(2000);

                    b.Property<string>("Mother")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<string>("Obitos")
                        .HasMaxLength(25);

                    b.Property<string>("Observations")
                        .HasMaxLength(2000);

                    b.Property<string>("Operaciones")
                        .HasMaxLength(25);

                    b.Property<string>("Others")
                        .HasMaxLength(500);

                    b.Property<string>("Otitis")
                        .HasMaxLength(25);

                    b.Property<string>("OtrasEnfermedades")
                        .HasMaxLength(500);

                    b.Property<string>("Paperas")
                        .HasMaxLength(25);

                    b.Property<string>("Para")
                        .HasMaxLength(25);

                    b.Property<string>("Parto")
                        .HasMaxLength(25);

                    b.Property<string>("Pecho")
                        .HasMaxLength(25);

                    b.Property<long>("PersonId");

                    b.Property<string>("PrimerDiente")
                        .HasMaxLength(25);

                    b.Property<string>("Rubeola")
                        .HasMaxLength(25);

                    b.Property<string>("Sarampion")
                        .HasMaxLength(25);

                    b.Property<string>("SeParo")
                        .HasMaxLength(25);

                    b.Property<string>("SeSento")
                        .HasMaxLength(25);

                    b.Property<string>("Sisters")
                        .HasMaxLength(100);

                    b.Property<string>("SoftFoods")
                        .HasMaxLength(50);

                    b.Property<string>("TallaAlNacer")
                        .HasMaxLength(25);

                    b.Property<string>("Termino")
                        .HasMaxLength(50);

                    b.Property<string>("Tosferina")
                        .HasMaxLength(25);

                    b.Property<string>("Tuberculosis")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Varicela")
                        .HasMaxLength(25);

                    b.Property<string>("Vitaminas")
                        .HasMaxLength(25);

                    b.Property<string>("Vomitos")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Pediatrics");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.QuickNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<long>("PersonId");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("QuickNotes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Recipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("DoctorText")
                        .HasMaxLength(50);

                    b.Property<string>("Duracion")
                        .HasMaxLength(50);

                    b.Property<string>("Envases")
                        .HasMaxLength(50);

                    b.Property<string>("Indications")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<string>("Observations")
                        .HasMaxLength(500);

                    b.Property<string>("PatientName")
                        .HasMaxLength(100);

                    b.Property<long>("PersonId");

                    b.Property<string>("Place")
                        .HasMaxLength(100);

                    b.Property<string>("Posologia")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("RecipeDate");

                    b.Property<string>("RecipeText")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Surgery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Abdomen");

                    b.Property<string>("ActualMedication")
                        .HasMaxLength(500);

                    b.Property<bool>("Acv");

                    b.Property<bool>("Alcohol");

                    b.Property<bool>("Alergias");

                    b.Property<string>("AnestesiaOtro")
                        .HasMaxLength(100);

                    b.Property<bool>("Angina");

                    b.Property<bool>("Angina2");

                    b.Property<string>("AntecedentesA")
                        .HasMaxLength(500);

                    b.Property<bool>("Anticonseptivos");

                    b.Property<int>("AperturaBucal");

                    b.Property<string>("Aqrs")
                        .HasMaxLength(20);

                    b.Property<int>("ArcodeFlexion");

                    b.Property<bool>("Arritmias");

                    b.Property<int>("Asa");

                    b.Property<bool>("AsmaBronquial");

                    b.Property<string>("Bd")
                        .HasMaxLength(20);

                    b.Property<string>("Bi")
                        .HasMaxLength(20);

                    b.Property<string>("BloqueosAv")
                        .HasMaxLength(20);

                    b.Property<string>("BloqueosRama")
                        .HasMaxLength(20);

                    b.Property<string>("BradicardiaS")
                        .HasMaxLength(20);

                    b.Property<bool>("Cafe");

                    b.Property<bool>("Cancer");

                    b.Property<string>("CardioOtros")
                        .HasMaxLength(500);

                    b.Property<bool>("CardiopatiaIsquemica");

                    b.Property<bool>("CardiopatiaReumatica");

                    b.Property<bool>("Cianosis");

                    b.Property<bool>("CirugiasPrevias");

                    b.Property<string>("Conclucion")
                        .HasMaxLength(500);

                    b.Property<string>("Consideraciones")
                        .HasMaxLength(2000);

                    b.Property<bool>("Convulciones");

                    b.Property<int>("Corazon");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<int>("Cuello");

                    b.Property<bool>("Cv");

                    b.Property<DateTime?>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("DerramePleural");

                    b.Property<bool>("DiabetesMellitus");

                    b.Property<string>("Diagnostic")
                        .HasMaxLength(100);

                    b.Property<int>("Discutido");

                    b.Property<bool>("Dislipidemia");

                    b.Property<bool>("Dismea");

                    b.Property<int>("DistanciaEsternomentoniana");

                    b.Property<int>("DistanciaTiromentoniana");

                    b.Property<bool>("Dpn");

                    b.Property<bool>("Drogas");

                    b.Property<bool>("Ebpoc");

                    b.Property<bool>("Edema");

                    b.Property<bool>("Embarazo");

                    b.Property<bool>("Endocrino");

                    b.Property<bool>("EnfEmatologica");

                    b.Property<bool>("EnfGastrointestinal");

                    b.Property<bool>("EnfHepatica");

                    b.Property<bool>("EnfRenal");

                    b.Property<int>("ExtencionAtlantoOccipital");

                    b.Property<string>("Extrasistoles")
                        .HasMaxLength(20);

                    b.Property<int>("ExtremInferiores");

                    b.Property<int>("ExtremSuperiores");

                    b.Property<int>("FamilyAlergy");

                    b.Property<bool>("Fatiga");

                    b.Property<string>("Fc")
                        .HasMaxLength(20);

                    b.Property<string>("FcElectro")
                        .HasMaxLength(20);

                    b.Property<string>("Fr")
                        .HasMaxLength(20);

                    b.Property<bool>("Hemorragias");

                    b.Property<bool>("Hepatica");

                    b.Property<string>("Hipertrofia")
                        .HasMaxLength(20);

                    b.Property<string>("Hquirurgica")
                        .HasMaxLength(500);

                    b.Property<bool>("HtaEsencial");

                    b.Property<bool>("Huevos");

                    b.Property<int>("Iam");

                    b.Property<string>("Imc")
                        .HasMaxLength(20);

                    b.Property<bool>("InsufVasc");

                    b.Property<bool>("Latex");

                    b.Property<int>("Mallampati");

                    b.Property<string>("Manejo")
                        .HasMaxLength(2000);

                    b.Property<bool>("Marcapaso");

                    b.Property<int>("MovTempmandibular");

                    b.Property<bool>("Nac");

                    b.Property<string>("Name");

                    b.Property<bool>("Obesidad");

                    b.Property<string>("ObservacionesIam")
                        .HasMaxLength(500);

                    b.Property<string>("OndasQ")
                        .HasMaxLength(20);

                    b.Property<string>("OndasT")
                        .HasMaxLength(20);

                    b.Property<bool>("Ortopnea");

                    b.Property<string>("OtrasPatologias")
                        .HasMaxLength(500);

                    b.Property<string>("OtrosHistoria")
                        .HasMaxLength(500);

                    b.Property<string>("P")
                        .HasMaxLength(20);

                    b.Property<bool>("Palpitaciones");

                    b.Property<string>("PatologiasCardio")
                        .HasMaxLength(500);

                    b.Property<long>("PersonId");

                    b.Property<int>("Peso");

                    b.Property<string>("PesoArt")
                        .HasMaxLength(20);

                    b.Property<int>("PlanAnestesia");

                    b.Property<string>("Pr")
                        .HasMaxLength(20);

                    b.Property<string>("Preferencias")
                        .HasMaxLength(2000);

                    b.Property<string>("Procedure")
                        .HasMaxLength(100);

                    b.Property<bool>("Pulmonar");

                    b.Property<int>("Pulmones");

                    b.Property<string>("Qrs")
                        .HasMaxLength(20);

                    b.Property<string>("Qt")
                        .HasMaxLength(20);

                    b.Property<string>("Recomendaciones")
                        .HasMaxLength(2000);

                    b.Property<bool>("Reflujo");

                    b.Property<bool>("RenalUrinario");

                    b.Property<string>("Riesgos")
                        .HasMaxLength(2000);

                    b.Property<string>("Ritmo")
                        .HasMaxLength(20);

                    b.Property<bool>("Sedentarismo");

                    b.Property<bool>("Sicc");

                    b.Property<bool>("Sincope");

                    b.Property<string>("SintomasNoCardio")
                        .HasMaxLength(500);

                    b.Property<bool>("Sncsnp");

                    b.Property<string>("Spo2")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("SurgeryDate");

                    b.Property<DateTime?>("SurgeryHour");

                    b.Property<bool>("Tabaquismo");

                    b.Property<bool>("Tabaquismo2");

                    b.Property<string>("Talla")
                        .HasMaxLength(20);

                    b.Property<string>("TaquicardiaS")
                        .HasMaxLength(20);

                    b.Property<bool>("TbPulmonar");

                    b.Property<int>("Torax");

                    b.Property<bool>("Tos");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<bool>("Valvulopatia");

                    b.Property<int>("ViasRespiratorias");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Surgeries");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.UserEmailSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Email");

                    b.Property<string>("HostNameSmtp");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("Port");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<int>("UserEmailSettingId");

                    b.Property<int>("UserId");

                    b.Property<string>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId1");

                    b.ToTable("UserEmailSettings");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Visit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BMI")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("BloodOxygen");

                    b.Property<string>("BloodPressure");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Heigth");

                    b.Property<string>("Name");

                    b.Property<string>("Observations")
                        .HasMaxLength(2000);

                    b.Property<long>("PersonId");

                    b.Property<string>("Pulse");

                    b.Property<string>("RespiratoryRate");

                    b.Property<string>("Temperature");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Cashier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("App");

                    b.Property<string>("Brand");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("IsOpened");

                    b.Property<string>("MacAddress");

                    b.Property<string>("Model");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<long?>("ShopId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ShopId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Cashiers");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.CashierDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AsignedUserId");

                    b.Property<decimal>("BilledBalance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("CashierId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CurrentBalanceCh")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CurrentBalanceEf")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CurrentBalanceNc")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CurrentBalanceTc")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("CurrentBalanceTe")
                        .HasColumnType("decimal(12,2)");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<decimal>("EndBalance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("EndBalanceCheck")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("EndBalanceCredit")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("EndBalanceEf")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("EndBalanceNc")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("EndBalanceTe")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("EndingDate");

                    b.Property<bool>("IsOpened");

                    b.Property<decimal?>("Mf1")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf10")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf100")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf1000")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf20")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf200")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf2000")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf25")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf5")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf50")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Mf500")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Name");

                    b.Property<decimal>("StartBalance")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("StartingDate")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AsignedUserId");

                    b.HasIndex("CashierId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CashierDetails");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("IsSaleCategory");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.CreditDebit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("AppliedDate");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CreditNo");

                    b.Property<DateTime?>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long?>("OriginId");

                    b.Property<long>("PersonId");

                    b.Property<string>("Reazon")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OriginId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CreditDebits");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("DebAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long>("PersonId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<decimal>("WastedAmount")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<decimal>("ProductCharges")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("ProductDiscount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("ProductId");

                    b.Property<long>("PurchaseId");

                    b.Property<int>("Quantity");

                    b.Property<long>("ShopId");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Lottery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CloseHour");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("ColorInHex");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OpenHour");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Lotteries");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryAvailable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryAvailables");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryMode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AwardedNumber");

                    b.Property<string>("Name");

                    b.Property<int>("PlayableNumber");

                    b.HasKey("Id");

                    b.ToTable("LotteryModes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryPrize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<decimal>("FirstValue")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<string>("Name");

                    b.Property<decimal>("SecondValue")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("ThirdValue")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryPrizes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<int>("EithgthValue");

                    b.Property<int>("FirstValue");

                    b.Property<int>("FivethValue");

                    b.Property<int>("FourthValue");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<string>("Name");

                    b.Property<int>("SecondValue");

                    b.Property<int>("SeventhValue");

                    b.Property<int>("SixthValue");

                    b.Property<int>("ThirdValue");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotteryResults");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AmountTe")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Barcode");

                    b.Property<long>("CashierDetailId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<string>("Remarks");

                    b.Property<int>("SeqByOwner");

                    b.Property<int>("SeqByShop");

                    b.Property<string>("Ticket");

                    b.Property<decimal>("TotalAmount");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CashierDetailId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotterySales");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySaleItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AmountTe")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<int>("EithgthValue");

                    b.Property<int>("FirstValue");

                    b.Property<int>("FivethValue");

                    b.Property<int>("FourthValue");

                    b.Property<long>("LotteryId");

                    b.Property<long>("LotteryModeId");

                    b.Property<long>("LotterySaleId");

                    b.Property<string>("Name");

                    b.Property<decimal>("PlayedAmount");

                    b.Property<int>("SecondValue");

                    b.Property<int>("SeventhValue");

                    b.Property<int>("SixthValue");

                    b.Property<int>("ThirdValue");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("LotteryModeId");

                    b.HasIndex("LotterySaleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotterySaleItems");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CloseHour");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<int>("DayOfTheWeek");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime>("InactiveDate");

                    b.Property<long>("LotteryId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OpenHour");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotteryId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LotterySchedules");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Measure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<string>("OrderNo")
                        .HasMaxLength(100);

                    b.Property<long>("PersonId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200);

                    b.Property<int>("Seq");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalCharges")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long>("OrderId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("ProductCharges")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("ProductDiscounts")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalDetail")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("AmountCheck")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("AmountNc")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("AmountTc")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("AmountTe")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Bank")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("BuildDate");

                    b.Property<long>("CashierDetailId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<decimal?>("DevolvedAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long?>("LotterySaleId");

                    b.Property<string>("Name");

                    b.Property<string>("NoCheque")
                        .HasMaxLength(20);

                    b.Property<string>("Owner")
                        .HasMaxLength(100);

                    b.Property<long>("PaymentTypeId");

                    b.Property<decimal?>("ReceivedAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200);

                    b.Property<long?>("SaleId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("WhoPay")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CashierDetailId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LotterySaleId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SaleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Price", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("FromDate");

                    b.Property<long?>("InsuranceId");

                    b.Property<string>("Name");

                    b.Property<long>("ProductId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200);

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("ToDate");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BarCode");

                    b.Property<byte[]>("BarcodeImage");

                    b.Property<long>("BrandId");

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("CategoryId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("ImageUrl");

                    b.Property<decimal>("Itbis")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Logo");

                    b.Property<long>("MeasureId");

                    b.Property<string>("Name");

                    b.Property<string>("Observations")
                        .HasMaxLength(200);

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("ServiceTypeId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("MeasureId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Purchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conduce");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("PaidDate");

                    b.Property<DateTime?>("PurchaseDate");

                    b.Property<string>("PurchaseInvoiceNo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasMaxLength(200);

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("SupplierId");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalCharges")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.PurchaseDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<decimal>("ProductCharges")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("ProductDiscount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long?>("ProductId");

                    b.Property<long?>("PurchaseId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalDetail")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutorizationNumber");

                    b.Property<long?>("CashierDetailId");

                    b.Property<long?>("CategoryId");

                    b.Property<decimal?>("CoverPercent")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<decimal>("DebtAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<bool>("FiscalCredit");

                    b.Property<long>("InsuranceId");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsPrivate");

                    b.Property<int?>("LiqSec");

                    b.Property<string>("Name");

                    b.Property<string>("Ncf")
                        .HasMaxLength(100);

                    b.Property<string>("NcfGub");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("PaidDate");

                    b.Property<long?>("PaymentTypeId");

                    b.Property<long>("PersonId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("SalesDate");

                    b.Property<string>("SalesInvoiceNo")
                        .HasMaxLength(100);

                    b.Property<int>("Seq");

                    b.Property<long>("StatusId");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalCharges")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.SaleDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<decimal>("ProductCharges")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("ProductDiscount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<long>("SaleId");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalDetail")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.SaleLiquidation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<long?>("InsuranceId");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(100);

                    b.Property<string>("Name");

                    b.Property<string>("Ncf")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasMaxLength(400);

                    b.Property<int>("Seq");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalCharges")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SaleLiquidations");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.SaleLiquidationDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long?>("SaleId");

                    b.Property<int>("Seq");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("SaleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SaleLiquidationDetails");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.SalesAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Name");

                    b.Property<long?>("SalesId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("SalesId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SalesAccounts");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.ServiceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("DebAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DeletedBy");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<string>("Tel")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.CurrencyRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CurrencyId");

                    b.Property<decimal>("DolarEquivalent")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Option", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(25);

                    b.Property<string>("Area")
                        .HasMaxLength(25);

                    b.Property<string>("Class")
                        .HasMaxLength(100);

                    b.Property<string>("Controller")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Icon");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Link")
                        .HasMaxLength(100);

                    b.Property<string>("Name");

                    b.Property<long>("OptionModuleId");

                    b.Property<int>("Order");

                    b.Property<long?>("PlanId");

                    b.HasKey("Id");

                    b.HasIndex("OptionModuleId");

                    b.HasIndex("PlanId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.OptionModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(25);

                    b.Property<string>("Area")
                        .HasMaxLength(25);

                    b.Property<string>("Class")
                        .HasMaxLength(100);

                    b.Property<string>("Controller")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Icon");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Link")
                        .HasMaxLength(100);

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.ToTable("OptionModules");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.OwnerType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("OwnerTypes");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Periodicity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Periodicities");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Plan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("CurrencyId");

                    b.Property<int>("Megabytes");

                    b.Property<string>("Name");

                    b.Property<long>("PeriodicityId");

                    b.Property<int>("RegiterCount");

                    b.Property<int>("UserPosibility");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PeriodicityId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.PlanOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<long>("OptionId");

                    b.Property<long?>("OptionModuleId");

                    b.Property<long>("PlanId");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("OptionModuleId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanOption");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.PlanTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<long>("CurrencyId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Megabytes");

                    b.Property<string>("Name");

                    b.Property<long>("OwnerPlanId");

                    b.Property<long>("PaymentTypeId");

                    b.Property<int>("Registers");

                    b.Property<int>("UserPosibility");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OwnerPlanId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PlanTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Activity", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("Mersy.Domain.Entities.Lms.Schedule", "Schedule")
                        .WithMany("Activities")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Status", "Status")
                        .WithMany("Activities")
                        .HasForeignKey("StatusId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.ActivityParticipant", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Activity", "Activity")
                        .WithMany("Participants")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Participant")
                        .WithMany("Participants")
                        .HasForeignKey("ParticipantId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Analitical", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Analiticals")
                        .HasForeignKey("PersonId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Employee", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Employees")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Estudie", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Estudies")
                        .HasForeignKey("PersonId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Image", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("Mersy.Domain.Entities.Fun.Benefit", "Benefit")
                        .WithMany()
                        .HasForeignKey("BenefitId");

                    b.HasOne("Mersy.Domain.Entities.Fun.Classe", "Classe")
                        .WithMany("Images")
                        .HasForeignKey("ClasseId");

                    b.HasOne("Mersy.Domain.Entities.Fun.ColaboratorDonation", "ColaboratorDonation")
                        .WithMany("Images")
                        .HasForeignKey("ColaboratorDonationId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Fun.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Images")
                        .HasForeignKey("PersonId");

                    b.HasOne("Mersy.Domain.Entities.Fun.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Mersy.Domain.Entities.Fun.Signature", "Signature")
                        .WithMany("Images")
                        .HasForeignKey("SignatureId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.MessageChat", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Occupant", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Fun.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Place", "Place")
                        .WithMany("Occupants")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Owner", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.OwnerType", "OwnerType")
                        .WithMany("Owners")
                        .HasForeignKey("OwnerTypeId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.OwnerPlan", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Owner", "Owner")
                        .WithMany("OwnerPlans")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Root.Plan", "Plan")
                        .WithMany("OwnerPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Person", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Med.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Mersy.Domain.Entities.Med.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("Mersy.Domain.Entities.Cor.MaritalSituation", "MaritalSituation")
                        .WithMany()
                        .HasForeignKey("MaritalSituationId");

                    b.HasOne("Mersy.Domain.Entities.Fun.MemberType")
                        .WithMany("People")
                        .HasForeignKey("MemberTypeId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Ocupation", "Ocupation")
                        .WithMany()
                        .HasForeignKey("OcupationId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.HasOne("Mersy.Domain.Entities.Cor.SchoolLevel", "SchoolLevel")
                        .WithMany()
                        .HasForeignKey("SchoolLevelId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Speciality")
                        .WithMany("People")
                        .HasForeignKey("SpecialityId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Status", "Status")
                        .WithMany("People")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.PersonSpeciality", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("PersonSpecialties")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Place", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person")
                        .WithMany("Places")
                        .HasForeignKey("PersonId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Status", "Status")
                        .WithMany("Places")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Zone", "Zone")
                        .WithMany("Places")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Related", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "RelatedPerson")
                        .WithMany("RelatedPeople")
                        .HasForeignKey("RelatedPersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.RelationType", "RelationType")
                        .WithMany()
                        .HasForeignKey("RelationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "RelationedPerson")
                        .WithMany("RelationedPeople")
                        .HasForeignKey("RelationedPersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Shop", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.Root.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Speciality", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Cor.Zone", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Shop", "Shop")
                        .WithMany("Zones")
                        .HasForeignKey("ShopId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.ActivityBeneficiary", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Activity", "Activity")
                        .WithMany("ActivityBeneficiaries")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Fun.Benefit", "Benefit")
                        .WithMany("ActivityBeneficiaries")
                        .HasForeignKey("BenefitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Beneficiary", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Fun.Benefit", "Benefit")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("BenefitId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Receiver")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("ReceiverId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Benefit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Buy", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.BuyDetail", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Fun.Buy", "Buy")
                        .WithMany("BuyDetails")
                        .HasForeignKey("BuyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.ClassAsistant", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Asistance")
                        .WithMany("Asistants")
                        .HasForeignKey("AsistanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Fun.Classe", "Classe")
                        .WithMany("Asistants")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Classe", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Place", "Place")
                        .WithMany("Classes")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Fun.Signature", "Signature")
                        .WithMany("Classes")
                        .HasForeignKey("SignatureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Colaborator", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.ColaboratorDonation", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Fun.Colaborator", "Colaborator")
                        .WithMany("ColaboratorDonations")
                        .HasForeignKey("ColaboratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.DayOfTheWeek", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Fun.Classe")
                        .WithMany("Days")
                        .HasForeignKey("ClasseId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.EconomicPerfil", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("EconomicPerfils")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Food", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.FoodBeneficiary", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Comensal")
                        .WithMany("Comensals")
                        .HasForeignKey("ComensalId");

                    b.HasOne("Mersy.Domain.Entities.Fun.Food", "Food")
                        .WithMany("Comensals")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.FoodDetail", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Fun.Food", "Food")
                        .WithMany("Details")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Material", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.MaterialInAndOut", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Fun.Material", "Material")
                        .WithMany("MaterialInAndOuts")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.MaterialRequisition", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "Requisitor")
                        .WithMany()
                        .HasForeignKey("RequisitorId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.MaterialRequisitionDetail", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Fun.MaterialRequisition", "MaterialRequisition")
                        .WithMany("MaterialRequisitionDetails")
                        .HasForeignKey("MaterialRequisitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.MemberType", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Project", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.ProjectMember", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Member")
                        .WithMany("ProjectsMember")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Fun.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.Signature", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Fun.Project", "Project")
                        .WithMany("Signatures")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Fun.SignatureMember", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Member")
                        .WithMany("SignaturesMember")
                        .HasForeignKey("MemberId");

                    b.HasOne("Mersy.Domain.Entities.Fun.Signature", "Signature")
                        .WithMany("Members")
                        .HasForeignKey("SignatureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Assignment", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Group", "Group")
                        .WithMany("Assignments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Lms.Subject")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Course", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Lms.CourseModality", "CourseModality")
                        .WithMany("Courses")
                        .HasForeignKey("CourseModalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Lms.CourseType", "CourseType")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Forum", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Group", "Group")
                        .WithMany("Forums")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.ForumComment", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Forum", "Forum")
                        .WithMany("ForumComments")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Lms.Student")
                        .WithMany("ForumComments")
                        .HasForeignKey("StudentId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.ForumCommentReply", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.ForumComment", "ForumComment")
                        .WithMany("ForumCommentReplies")
                        .HasForeignKey("ForumCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.ForumGrading", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.ForumComment", "ForumComment")
                        .WithMany("ForumGradings")
                        .HasForeignKey("ForumCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Grading", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Submission", "Submission")
                        .WithMany("Gradings")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Group", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Mersy.Domain.Entities.Lms.Subject", "Subject")
                        .WithMany("Groups")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.GroupMessage", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Group", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.GroupStudent", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Group", "Group")
                        .WithMany("GroupStudents")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Person")
                        .WithMany("GroupStudents")
                        .HasForeignKey("PersonId");

                    b.HasOne("Mersy.Domain.Entities.Lms.Student", "Student")
                        .WithMany("Groups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Lesson", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Group", "Group")
                        .WithMany("Lessons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.LessonComment", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Lesson", "Lesson")
                        .WithMany("LessonComments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.LessonReply", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.LessonComment", "LessonComment")
                        .WithMany("LessonReplies")
                        .HasForeignKey("LessonCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Quizz", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Group", "Group")
                        .WithMany("Quizzes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.QuizzChoise", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.QuizzQuestion", "QuizzQuestion")
                        .WithMany("QuizzChoises")
                        .HasForeignKey("QuizzQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.QuizzQuestion", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Quizz", "Quizz")
                        .WithMany("QuizzQuestions")
                        .HasForeignKey("QuizzId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.QuizzSubmition", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Quizz", "Quizz")
                        .WithMany("QuizzSubmitions")
                        .HasForeignKey("QuizzId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Lms.Student")
                        .WithMany("QuizzSubmitions")
                        .HasForeignKey("StudentId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Schedule", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Group", "Group")
                        .WithMany("Schedules")
                        .HasForeignKey("GroupId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Place")
                        .WithMany("Schedules")
                        .HasForeignKey("PlaceId");

                    b.HasOne("Mersy.Domain.Entities.Cor.ScheduleFormat", "ScheduleFormat")
                        .WithMany()
                        .HasForeignKey("ScheduleFormatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.School", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Student", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Students")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Subject", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Lms.Course", "Course")
                        .WithMany("Subjects")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Speciality", "Speciality")
                        .WithMany("Subjects")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Lms.SubjectModality", "SubjectModality")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectModalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Submission", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Lms.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.Upload", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Group", "Group")
                        .WithMany("Uploads")
                        .HasForeignKey("GroupId");

                    b.HasOne("Mersy.Domain.Entities.Lms.Student")
                        .WithMany("Uploads")
                        .HasForeignKey("StudentId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Lms.UploadComment", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Mersy.Domain.Entities.Lms.Upload", "Upload")
                        .WithMany("UploadComments")
                        .HasForeignKey("UploadId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Admision", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Admisions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UserAlta")
                        .WithMany()
                        .HasForeignKey("UserAltaId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Allergy", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Med.AllergyCategory", "AllergyCategory")
                        .WithMany("Allergies")
                        .HasForeignKey("AllergyCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.AnalyticalSheet", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("AnalyticalSheets")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Appointment", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Appointments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Speciality", "Speciality")
                        .WithMany("Appointments")
                        .HasForeignKey("SpecialityId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Tanda", "Tanda")
                        .WithMany()
                        .HasForeignKey("TandaId1");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Bariatric", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Bariatrics")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.BariatricVisit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Med.Bariatric", "Bariatric")
                        .WithMany("BariatricVisits")
                        .HasForeignKey("BariatricId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.ClinicHistory", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("ClinicHistories")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Condition", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Conditions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.DentalHistory", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("DentalHistories")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Diagnostic", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.DiagnosticCie10", "DiagnosticCie")
                        .WithMany()
                        .HasForeignKey("DiagnosticId");

                    b.HasOne("Mersy.Domain.Entities.Med.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Diagnostics")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.DiagnosticCie10", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Med.DiagnosticCategoryCie10", "Category")
                        .WithMany("Diagnostics")
                        .HasForeignKey("DiagnosticCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Doctor", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Doctors")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Emergency", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Emergencies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Endocrine", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Endocrines")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.General", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Generals")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.GeneralAfection", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("GeneralAfections")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.GeneralAfectionVisit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.GeneralAfection", "GeneralAfection")
                        .WithMany("GeneralAfectionVisits")
                        .HasForeignKey("GeneralAfectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.GeneralVisit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.General", "General")
                        .WithMany("GeneralVisits")
                        .HasForeignKey("GeneralId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Gynecology", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Gynecologies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.GynecologyVisit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.Gynecology", "Gynecology")
                        .WithMany("GynecologyVisits")
                        .HasForeignKey("GynecologyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Kid", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Lms.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Kids")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Lms.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Tanda", "Tanda")
                        .WithMany()
                        .HasForeignKey("TandaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.LabClasification", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Laboratory", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.LabClasification", "LabClasification")
                        .WithMany("Laboratories")
                        .HasForeignKey("LabClasificationId1");

                    b.HasOne("Mersy.Domain.Entities.Cor.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId1");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.LaboratoryResult", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("LaboratoryResults")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.MedicalCertificate", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("MedicalCertificates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.MultiaxialHistory", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("MultiaxialHistories")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Obstetric", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Obstetrics")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.ObstetricVisit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.Obstetric", "Obstetric")
                        .WithMany("ObstetricVisits")
                        .HasForeignKey("ObstetricId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Patient", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Patients")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.PatientAllergy", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Med.Allergy", "Allergy")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("AllergyId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.PatientDiagnostic", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.DiagnosticCie10", "Diagnostic")
                        .WithMany("Patients")
                        .HasForeignKey("DiagnosticId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Pediatric", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.QuickNote", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("QuickNotes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Recipe", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Recipes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Surgery", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Surgeries")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.UserEmailSetting", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Med.Visit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Visits")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Brand", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Cashier", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.CashierDetail", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "AsignedUser")
                        .WithMany()
                        .HasForeignKey("AsignedUserId");

                    b.HasOne("Mersy.Domain.Entities.Pos.Cashier", "Cashier")
                        .WithMany("CashiersdDetails")
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Category", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.CreditDebit", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cpo.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Customer", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany("Customers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Inventory", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Lottery", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryAvailable", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany("LotteryAvailables")
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany("LotteryAvailables")
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryPrize", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany("LotteryPrizes")
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany("LotteryPrizes")
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotteryResult", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany("LotteryResults")
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySale", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Pos.CashierDetail", "CashierDetail")
                        .WithMany()
                        .HasForeignKey("CashierDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySaleItem", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotteryMode", "LotteryMode")
                        .WithMany("LotterySaleItems")
                        .HasForeignKey("LotteryModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.LotterySale", "LotterySale")
                        .WithMany("LotterySaleItems")
                        .HasForeignKey("LotterySaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.LotterySchedule", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Lottery", "Lottery")
                        .WithMany("LotterySchedules")
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Measure", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Order", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.OrderDetail", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Payment", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Pos.CashierDetail", "CashierDetail")
                        .WithMany()
                        .HasForeignKey("CashierDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.LotterySale", "LotterySale")
                        .WithMany()
                        .HasForeignKey("LotterySaleId");

                    b.HasOne("Mersy.Domain.Entities.Cor.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Price", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("Mersy.Domain.Entities.Pos.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Product", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Pos.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Purchase", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.PurchaseDetail", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Mersy.Domain.Entities.Pos.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Sale", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Pos.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("Mersy.Domain.Entities.Cor.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.SaleDetail", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Pos.Sale", "Sales")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.SaleLiquidation", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Med.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.SaleLiquidationDetail", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.SalesAccount", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.Pos.Sale", "Sales")
                        .WithMany()
                        .HasForeignKey("SalesId");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Pos.Supplier", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.CurrencyRate", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.Currency", "Currency")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Option", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.OptionModule", "OptionModule")
                        .WithMany()
                        .HasForeignKey("OptionModuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Root.Plan")
                        .WithMany("Options")
                        .HasForeignKey("PlanId");
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.Plan", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.Currency", "Currency")
                        .WithMany("Plans")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Root.Periodicity", "Periodicity")
                        .WithMany("Plans")
                        .HasForeignKey("PeriodicityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.PlanOption", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.Option", "Option")
                        .WithMany("PlanOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Root.OptionModule")
                        .WithMany("PlanOptions")
                        .HasForeignKey("OptionModuleId");

                    b.HasOne("Mersy.Domain.Entities.Root.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mersy.Domain.Entities.Root.PlanTransaction", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.Root.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.OwnerPlan", "OwnerPlan")
                        .WithMany("PlanTransactions")
                        .HasForeignKey("OwnerPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mersy.Domain.Entities.Cor.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mersy.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Mersy.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
